{
    "pipes": [],
    "interfaces": [
        {
            "name": "NgpAccordionConfig",
            "id": "interface-NgpAccordionConfig-a643b7a7ae2171a0c3d0a33c7c2aff423a8a67d8d83817dbb3b2ea43a6f25852e92c549b9957789bcd91b377461ef46dcbdb188c333acf15ad941b6d8e3a5892",
            "file": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken, Provider, inject } from '@angular/core';\n\nexport const NgpAccordionConfigToken = new InjectionToken<NgpAccordionConfig>(\n  'NgpAccordionConfiguration',\n);\n\nexport interface NgpAccordionConfig {\n  /**\n   * Determines whether multiple panels can be open simultaneously.\n   * @default false\n   */\n  multiple: boolean;\n\n  /**\n   * The orientation of the accordion.\n   * @default 'vertical'\n   */\n  orientation: 'horizontal' | 'vertical';\n}\n\nconst defaultAccordionConfig: NgpAccordionConfig = {\n  multiple: false,\n  orientation: 'vertical',\n};\n\n/**\n * Provide the default accordion configuration\n * @param config The accordion configuration\n * @returns The provider\n */\nexport function provideAccordionConfig(config: Partial<NgpAccordionConfig>): Provider[] {\n  return [\n    {\n      provide: NgpAccordionConfigToken,\n      useValue: { ...defaultAccordionConfig, ...config },\n    },\n  ];\n}\n\n/**\n * Inject the accordion configuration\n * @returns The global accordion configuration\n */\nexport function injectAccordionConfig(): NgpAccordionConfig {\n  return inject(NgpAccordionConfigToken, { optional: true }) ?? defaultAccordionConfig;\n}\n",
            "properties": [
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Determines whether multiple panels can be open simultaneously.</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nDetermines whether multiple panels can be open simultaneously.\n",
                    "jsdoctags": [
                        {
                            "pos": 298,
                            "end": 316,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 299,
                                "end": 306,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ]
                },
                {
                    "name": "orientation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"horizontal\" | \"vertical\"",
                    "optional": false,
                    "description": "<p>The orientation of the accordion.</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nThe orientation of the accordion.\n",
                    "jsdoctags": [
                        {
                            "pos": 391,
                            "end": 414,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 392,
                                "end": 399,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;vertical&#39;</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "NgpAvatarConfig",
            "id": "interface-NgpAvatarConfig-7088f5ac9beaecbf364ef506cb5831e83b00a3e3044297af399450d38e9dd77d7fe4c9828f5733c979f636f4d920814af6473ab44ccca560962fec9842d86ac4",
            "file": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken, Provider, inject } from '@angular/core';\n\nexport interface NgpAvatarConfig {\n  /**\n   * Define a delay before the fallback is shown. This is useful to only show the fallback for those with slower connections.\n   * @default 0\n   */\n  delay: number;\n}\n\nexport const defaultAvatarConfig: NgpAvatarConfig = {\n  delay: 0,\n};\n\nexport const NgpAvatarConfigToken = new InjectionToken<NgpAvatarConfig>('NgpAvatarConfigToken');\n\nexport function provideAvatarConfig(config: Partial<NgpAvatarConfig>): Provider[] {\n  return [\n    {\n      provide: NgpAvatarConfigToken,\n      useValue: { ...defaultAvatarConfig, ...config },\n    },\n  ];\n}\n\nexport function injectAvatarConfig(): NgpAvatarConfig {\n  return inject(NgpAvatarConfigToken, { optional: true }) ?? defaultAvatarConfig;\n}\n",
            "properties": [
                {
                    "name": "delay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Define a delay before the fallback is shown. This is useful to only show the fallback for those with slower connections.</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nDefine a delay before the fallback is shown. This is useful to only show the fallback for those with slower connections.\n",
                    "jsdoctags": [
                        {
                            "pos": 239,
                            "end": 253,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 240,
                                "end": 247,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "NgpTabsetConfig",
            "id": "interface-NgpTabsetConfig-1053ecb1f38f6fb4bc49f203110ec62eaee744e234e0ee31577b2a7d5f2d86a504411857a8d2aa62df7412cf32890359f47b12d58bd2c17a126bbe0532557a93",
            "file": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken, Provider, inject } from '@angular/core';\n\nexport const NgpTabsetConfigToken = new InjectionToken<NgpTabsetConfig>('NgpTabsetConfiguration');\n\nexport interface NgpTabsetConfig {\n  /**\n   * The orientation of the tabset\n   * @default 'horizontal'\n   */\n  orientation: 'horizontal' | 'vertical';\n\n  /**\n   * Whether tabs should activate on focus\n   * @default true\n   */\n  activateOnFocus: boolean;\n\n  /**\n   * Whether focus should wrap within the tab list when using the keyboard.\n   * @default true\n   */\n  wrap: boolean;\n}\n\nconst defaultTabsetConfig: NgpTabsetConfig = {\n  orientation: 'horizontal',\n  activateOnFocus: true,\n  wrap: true,\n};\n\n/**\n * Provide the default tabset configuration\n * @param config The tabset configuration\n * @returns The provider\n */\nexport function provideTabsetConfig(config: Partial<NgpTabsetConfig>): Provider[] {\n  return [\n    {\n      provide: NgpTabsetConfigToken,\n      useValue: { ...defaultTabsetConfig, ...config },\n    },\n  ];\n}\n\n/**\n * Inject the tabset configuration\n * @returns The global tabset configuration\n */\nexport function injectTabsetConfig(): NgpTabsetConfig {\n  return inject(NgpTabsetConfigToken, { optional: true }) ?? defaultTabsetConfig;\n}\n",
            "properties": [
                {
                    "name": "activateOnFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Whether tabs should activate on focus</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nWhether tabs should activate on focus\n",
                    "jsdoctags": [
                        {
                            "pos": 373,
                            "end": 390,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 374,
                                "end": 381,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ]
                },
                {
                    "name": "orientation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"horizontal\" | \"vertical\"",
                    "optional": false,
                    "description": "<p>The orientation of the tabset</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nThe orientation of the tabset\n",
                    "jsdoctags": [
                        {
                            "pos": 248,
                            "end": 273,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 249,
                                "end": 256,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;horizontal&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "wrap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Whether focus should wrap within the tab list when using the keyboard.</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nWhether focus should wrap within the tab list when using the keyboard.\n",
                    "jsdoctags": [
                        {
                            "pos": 509,
                            "end": 526,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 510,
                                "end": 517,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "NgpTooltipConfig",
            "id": "interface-NgpTooltipConfig-3f9fd3a617f8aa0c8f5e3e35c50f4add064f4d5ac1a2e02271e8623e586ba0e91125dc02c8c1a59820a4f0e123c2eabe07424dac9654f6429df758f5cbbd09ac",
            "file": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken, Provider, inject } from '@angular/core';\nimport { Placement } from '@floating-ui/dom';\n\nexport const NgpTooltipConfigToken = new InjectionToken<NgpTooltipConfig>('NgpTooltipConfig');\n\nexport interface NgpTooltipConfig {\n  /**\n   * Define the offset of the tooltip relative to the trigger.\n   * @default 4\n   */\n  offset: number;\n\n  /**\n   * Define the placement of the tooltip relative to the trigger.\n   * @default 'top'\n   */\n  placement: Placement;\n\n  /**\n   * Define the delay before the tooltip is shown.\n   * @default 0\n   */\n  showDelay: number;\n\n  /**\n   * Define the delay before the tooltip is hidden.\n   * @default 0\n   */\n  hideDelay: number;\n\n  /**\n   * Define whether the tooltip should flip when there is not enough space for the tooltip.\n   * @default true\n   */\n  flip: boolean;\n\n  /**\n   * Define the container in to which the tooltip should be attached.\n   * @default document.body\n   */\n  container: HTMLElement;\n}\n\nconst defaultTooltipConfig: NgpTooltipConfig = {\n  offset: 4,\n  placement: 'top',\n  showDelay: 0,\n  hideDelay: 0,\n  flip: true,\n  container: document.body,\n};\n\n/**\n * Provide the default Tooltip configuration\n * @param config The Tooltip configuration\n * @returns The provider\n */\nexport function provideTooltipConfig(config: Partial<NgpTooltipConfig>): Provider[] {\n  return [\n    {\n      provide: NgpTooltipConfigToken,\n      useValue: { ...defaultTooltipConfig, ...config },\n    },\n  ];\n}\n\n/**\n * Inject the Tooltip configuration\n * @returns The global Tooltip configuration\n */\nexport function injectTooltipConfig(): NgpTooltipConfig {\n  return inject(NgpTooltipConfigToken, { optional: true }) ?? defaultTooltipConfig;\n}\n",
            "properties": [
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "<p>Define the container in to which the tooltip should be attached.</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nDefine the container in to which the tooltip should be attached.\n",
                    "jsdoctags": [
                        {
                            "pos": 903,
                            "end": 929,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 904,
                                "end": 911,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>document.body</p>\n"
                        }
                    ]
                },
                {
                    "name": "flip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Define whether the tooltip should flip when there is not enough space for the tooltip.</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nDefine whether the tooltip should flip when there is not enough space for the tooltip.\n",
                    "jsdoctags": [
                        {
                            "pos": 784,
                            "end": 801,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 785,
                                "end": 792,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ]
                },
                {
                    "name": "hideDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Define the delay before the tooltip is hidden.</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nDefine the delay before the tooltip is hidden.\n",
                    "jsdoctags": [
                        {
                            "pos": 642,
                            "end": 656,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 643,
                                "end": 650,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ]
                },
                {
                    "name": "offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Define the offset of the tooltip relative to the trigger.</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nDefine the offset of the tooltip relative to the trigger.\n",
                    "jsdoctags": [
                        {
                            "pos": 319,
                            "end": 333,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 320,
                                "end": 327,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>4</p>\n"
                        }
                    ]
                },
                {
                    "name": "placement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Placement",
                    "optional": false,
                    "description": "<p>Define the placement of the tooltip relative to the trigger.</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nDefine the placement of the tooltip relative to the trigger.\n",
                    "jsdoctags": [
                        {
                            "pos": 432,
                            "end": 450,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 433,
                                "end": 440,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;top&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "showDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Define the delay before the tooltip is shown.</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nDefine the delay before the tooltip is shown.\n",
                    "jsdoctags": [
                        {
                            "pos": 540,
                            "end": 554,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 541,
                                "end": 548,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "ResizeEvent",
            "id": "interface-ResizeEvent-ef5d3f7f69116bd7cd3c6f0846ed10796f22ea01aa2a147ca1dbd4292a0eeac5582024f39411cfd7819dd51fc4046ac7479d5e4277dd42091b172a0c35d6a91d",
            "file": "packages/ng-primitives/resize/src/utils/resize.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\n\n/**\n * A simple helper function to create a resize observer as an RxJS Observable.\n */\nexport function fromResizeEvent(element: HTMLElement): Observable<ResizeEvent> {\n  return new Observable(observer => {\n    const resizeObserver = new ResizeObserver(entries => {\n      // if there are no entries, ignore the event\n      if (!entries.length) {\n        return;\n      }\n\n      // otherwise, take the first entry and emit the dimensions\n      const entry = entries[0];\n\n      if ('borderBoxSize' in entry) {\n        const borderSizeEntry = entry['borderBoxSize'];\n        // this may be different across browsers so normalize it\n        const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n\n        observer.next({ width: borderSize['inlineSize'], height: borderSize['blockSize'] });\n      } else {\n        // fallback for browsers that don't support borderBoxSize\n        observer.next({\n          width: element.offsetWidth,\n          height: element.offsetHeight,\n        });\n      }\n    });\n\n    resizeObserver.observe(element);\n\n    return () => resizeObserver.disconnect();\n  });\n}\n\nexport interface ResizeEvent {\n  width: number;\n  height: number;\n}\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "NgpAccordionContentDirective",
            "id": "directive-NgpAccordionContentDirective-5700dc335046bf00b3e88b967443cb455a88673f686909042f2034da3e4a9b52073e39534a7c32abd9cf58fe593f01ebedb3ff489f567651ff292d011543ee6f",
            "file": "packages/ng-primitives/accordion/src/accordion-content/accordion-content.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  HostBinding,\n  inject,\n} from '@angular/core';\nimport { NgpAccordionPanelToken } from '../accordion-panel/accordion-panel.token';\nimport { NgpAccordionStateDirective } from '../common/accordion-state.directive';\n\n@Directive({\n  selector: '[ngpAccordionContent]',\n  standalone: true,\n  host: {\n    role: 'region',\n    '[id]': 'id',\n    '[attr.aria-labelledby]': 'labelledby',\n  },\n  hostDirectives: [NgpAccordionStateDirective],\n})\nexport class NgpAccordionContentDirective implements AfterViewInit {\n  /**\n   * Access the element ref.\n   */\n  private readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /**\n   * Access the change detector ref.\n   */\n  private readonly changeDetectorRef = inject(ChangeDetectorRef);\n\n  /**\n   * Access the panel the content belongs to.\n   */\n  private readonly panel = inject(NgpAccordionPanelToken);\n\n  /**\n   * Derive the id of the content.\n   * @internal\n   */\n  readonly id = `${this.panel.id}-content`;\n\n  /**\n   * Derive the id of the trigger.\n   * @internal\n   */\n  readonly labelledby = `${this.panel.id}-trigger`;\n\n  /**\n   * Define the width of the content as a CSS variable so it can be used in animations.\n   * @internal\n   */\n  @HostBinding('style.--ngp-accordion-content-width.px')\n  protected width = this.elementRef.nativeElement.scrollWidth;\n\n  /**\n   * Define the height of the content as a CSS variable so it can be used in animations.\n   * @internal\n   */\n  @HostBinding('style.--ngp-accordion-content-height.px')\n  protected height = this.elementRef.nativeElement.scrollHeight;\n\n  ngAfterViewInit(): void {\n    this.updateContentSize();\n  }\n\n  /**\n   * Update the size of the content.\n   */\n  private updateContentSize(): void {\n    this.width = this.elementRef.nativeElement.scrollWidth;\n    this.height = this.elementRef.nativeElement.scrollHeight;\n    this.changeDetectorRef.detectChanges();\n  }\n}\n",
            "selector": "[ngpAccordionContent]",
            "providers": [],
            "hostDirectives": [
                {
                    "name": "NgpAccordionStateDirective"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.--ngp-accordion-content-height.px",
                    "defaultValue": "this.elementRef.nativeElement.scrollHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1487,
                            "end": 1500,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1488,
                                "end": 1496,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nDefine the height of the content as a CSS variable so it can be used in animations.\n",
                    "description": "<p>Define the height of the content as a CSS variable so it can be used in animations.</p>\n",
                    "line": 62,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "style.--ngp-accordion-content-width.px",
                    "defaultValue": "this.elementRef.nativeElement.scrollWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1250,
                            "end": 1263,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1251,
                                "end": 1259,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nDefine the width of the content as a CSS variable so it can be used in animations.\n",
                    "description": "<p>Define the width of the content as a CSS variable so it can be used in animations.</p>\n",
                    "line": 55,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "changeDetectorRef",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the change detector ref.</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nAccess the change detector ref.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "elementRef",
                    "defaultValue": "inject<ElementRef<HTMLElement>>(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the element ref.</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nAccess the element ref.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "height",
                    "defaultValue": "this.elementRef.nativeElement.scrollHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Define the height of the content as a CSS variable so it can be used in animations.</p>\n",
                    "line": 62,
                    "rawdescription": "\n\nDefine the height of the content as a CSS variable so it can be used in animations.\n",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.--ngp-accordion-content-height.px'"
                        }
                    ],
                    "modifierKind": [
                        167,
                        122
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1487,
                            "end": 1500,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1488,
                                "end": 1496,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`${this.panel.id}-content`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Derive the id of the content.</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nDerive the id of the content.\n",
                    "modifierKind": [
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 975,
                            "end": 988,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 976,
                                "end": 984,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "labelledby",
                    "defaultValue": "`${this.panel.id}-trigger`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Derive the id of the trigger.</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nDerive the id of the trigger.\n",
                    "modifierKind": [
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1082,
                            "end": 1095,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1083,
                                "end": 1091,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "panel",
                    "defaultValue": "inject(NgpAccordionPanelToken)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the panel the content belongs to.</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nAccess the panel the content belongs to.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "width",
                    "defaultValue": "this.elementRef.nativeElement.scrollWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Define the width of the content as a CSS variable so it can be used in animations.</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nDefine the width of the content as a CSS variable so it can be used in animations.\n",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.--ngp-accordion-content-width.px'"
                        }
                    ],
                    "modifierKind": [
                        167,
                        122
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1250,
                            "end": 1263,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1251,
                                "end": 1259,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "updateContentSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the size of the content.\n",
                    "description": "<p>Update the size of the content.</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "NgpAccordionDirective",
            "id": "directive-NgpAccordionDirective-5c1364415a0cb49cdfc56209bd5a6ef31064e2a54e4cf92770e20153a2b5722a13c1fab25ef310ef48d5060940a8d66d3550b69bc3f9c0ccac74257f0961e647",
            "file": "packages/ng-primitives/accordion/src/accordion/accordion.directive.ts",
            "type": "directive",
            "description": "<p>The root accordion directive that all parts should be placed within.</p>\n",
            "rawdescription": "\n\nThe root accordion directive that all parts should be placed within.\n",
            "sourceCode": "import { Directive, HostBinding, Input, booleanAttribute, signal } from '@angular/core';\nimport { injectAccordionConfig } from '../config/accordion.config';\nimport { NgpAccordionToken } from './accordion.token';\n\n/**\n * The root accordion directive that all parts should be placed within.\n */\n@Directive({\n  selector: '[ngpAccordion]',\n  standalone: true,\n  providers: [{ provide: NgpAccordionToken, useExisting: NgpAccordionDirective }],\n})\nexport class NgpAccordionDirective {\n  /**\n   * Access the global accordion configuration.\n   */\n  private readonly config = injectAccordionConfig();\n\n  /**\n   * Determines whether multiple panels can be open simultaneously.\n   * @default false\n   */\n  @Input({ alias: 'ngpAccordionMultiple', transform: booleanAttribute }) multiple: boolean =\n    this.config.multiple;\n\n  /**\n   * The orientation of the accordion.\n   * @default 'vertical'\n   */\n  @HostBinding('attr.data-orientation')\n  @Input({ alias: 'ngpAccordionOrientation' })\n  orientation: 'horizontal' | 'vertical' = this.config.orientation;\n\n  /**\n   * Determines whether the accordion should be disabled.\n   * @default false\n   */\n  @Input({ alias: 'ngpAccordionDisabled', transform: booleanAttribute }) disabled = false;\n\n  /**\n   * Store the currently expanded panel(s).\n   * @internal\n   */\n  readonly expanded = signal<string[]>([]);\n\n  /**\n   * Expand a panel.\n   * @param id The id of the panel to expand.\n   */\n  expand(id: string): void {\n    this.expanded.set(this.multiple ? [...this.expanded(), id] : [id]);\n  }\n\n  /**\n   * Collapse a panel.\n   * @param id The id of the panel to collapse.\n   */\n  collapse(id: string): void {\n    this.expanded.set(this.expanded().filter(expandedId => expandedId !== id));\n  }\n\n  /**\n   * Toggle a panel.\n   * @param id The id of the panel to toggle.\n   */\n  toggle(id: string): void {\n    if (this.expanded().includes(id)) {\n      this.collapse(id);\n    } else {\n      this.expand(id);\n    }\n  }\n\n  /**\n   * Collapse all panels.\n   */\n  collapseAll(): void {\n    this.expanded.set([]);\n  }\n}\n",
            "selector": "[ngpAccordion]",
            "providers": [
                {
                    "name": "{ provide: NgpAccordionToken, useExisting: NgpAccordionDirective }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpAccordionDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1114,
                            "end": 1132,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1115,
                                "end": 1122,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDetermines whether the accordion should be disabled.\n",
                    "description": "<p>Determines whether the accordion should be disabled.</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpAccordionMultiple",
                    "defaultValue": "this.config.multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 672,
                            "end": 690,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 673,
                                "end": 680,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDetermines whether multiple panels can be open simultaneously.\n",
                    "description": "<p>Determines whether multiple panels can be open simultaneously.</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpAccordionOrientation",
                    "defaultValue": "this.config.orientation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 863,
                            "end": 886,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 864,
                                "end": 871,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;vertical&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe orientation of the accordion.\n",
                    "description": "<p>The orientation of the accordion.</p>\n",
                    "line": 32,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "injectAccordionConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the global accordion configuration.</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nAccess the global accordion configuration.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "expanded",
                    "defaultValue": "signal<string[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Store the currently expanded panel(s).</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nStore the currently expanded panel(s).\n",
                    "modifierKind": [
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1282,
                            "end": 1295,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1283,
                                "end": 1291,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "collapse",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCollapse a panel.\n",
                    "description": "<p>Collapse a panel.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1569,
                                "end": 1571,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1563,
                                "end": 1568,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The id of the panel to collapse.</p>\n"
                        }
                    ]
                },
                {
                    "name": "collapseAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCollapse all panels.\n",
                    "description": "<p>Collapse all panels.</p>\n"
                },
                {
                    "name": "expand",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExpand a panel.\n",
                    "description": "<p>Expand a panel.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1382,
                                "end": 1384,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1376,
                                "end": 1381,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The id of the panel to expand.</p>\n"
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle a panel.\n",
                    "description": "<p>Toggle a panel.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1766,
                                "end": 1768,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1760,
                                "end": 1765,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The id of the panel to toggle.</p>\n"
                        }
                    ]
                }
            ]
        },
        {
            "name": "NgpAccordionHeaderDirective",
            "id": "directive-NgpAccordionHeaderDirective-b854878d6de8555580b344cc9a281dfe4fc5566dfad12ce4428010932590bab9995868c73b7a34332085cdb19a41c3ad2207144fb6b1f1488ecae965c43d4955",
            "file": "packages/ng-primitives/accordion/src/accordion-header/accordion-header.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\nimport { NgpAccordionStateDirective } from '../common/accordion-state.directive';\n\n@Directive({\n  selector: '[ngpAccordionHeader]',\n  standalone: true,\n  hostDirectives: [NgpAccordionStateDirective],\n})\nexport class NgpAccordionHeaderDirective {}\n",
            "selector": "[ngpAccordionHeader]",
            "providers": [],
            "hostDirectives": [
                {
                    "name": "NgpAccordionStateDirective"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "NgpAccordionPanelDirective",
            "id": "directive-NgpAccordionPanelDirective-1b60258bf6d25bca561cd881fba89067a4cee0a6610908343eed7044674a83dd89d735340ca770af6f8ad65b9d440bebea91c931f8873b7d9df75baad6419fd2",
            "file": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, Input, Output, booleanAttribute, computed } from '@angular/core';\nimport { injectAccordion } from '../accordion/accordion.token';\nimport { NgpAccordionStateDirective } from '../common/accordion-state.directive';\nimport { NgpAccordionPanelToken } from './accordion-panel.token';\n\n/**\n * A unique id for the panel.\n */\nlet uniqueId = 0;\n\n@Directive({\n  selector: '[ngpAccordionPanel]',\n  standalone: true,\n  providers: [{ provide: NgpAccordionPanelToken, useExisting: NgpAccordionPanelDirective }],\n  hostDirectives: [NgpAccordionStateDirective],\n})\nexport class NgpAccordionPanelDirective {\n  /**\n   * Access the accordion the panel belongs to.\n   */\n  private readonly accordion = injectAccordion();\n\n  /**\n   * Determines whether the panel should be expanded.\n   * @default false\n   */\n  @Input({ alias: 'ngpAccordionPanelExpanded', transform: booleanAttribute }) expanded = false;\n\n  /**\n   * Determines whether the panel should be disabled.\n   * @default false\n   */\n  @Input({ alias: 'ngpAccordionPanelDisabled', transform: booleanAttribute }) disabled = false;\n\n  /**\n   * Event emitted when the panel is expanded.\n   */\n  @Output('ngpAccordionPanelExpandedChange') readonly expandedChange = new EventEmitter<boolean>();\n\n  /**\n   * The unique id of the panel.\n   * @internal\n   */\n  readonly id = `ngp-accordion-panel-${uniqueId++}`;\n\n  /**\n   * Determine if this panel is expanded.\n   * @internal\n   */\n  readonly isExpanded = computed(() => this.accordion.expanded().includes(this.id));\n\n  /**\n   * Toggle the expanded state of the panel.\n   */\n  toggle(): void {\n    // If the accordion or panel is disabled, do nothing.\n    if (this.accordion.disabled || this.disabled) {\n      return;\n    }\n\n    if (this.isExpanded()) {\n      this.accordion.collapse(this.id);\n    } else {\n      this.accordion.expand(this.id);\n    }\n\n    this.expandedChange.emit(this.isExpanded());\n  }\n}\n",
            "selector": "[ngpAccordionPanel]",
            "providers": [
                {
                    "name": "{ provide: NgpAccordionPanelToken, useExisting: NgpAccordionPanelDirective }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [
                {
                    "name": "NgpAccordionStateDirective"
                }
            ],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpAccordionPanelDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 983,
                            "end": 1001,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 984,
                                "end": 991,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDetermines whether the panel should be disabled.\n",
                    "description": "<p>Determines whether the panel should be disabled.</p>\n",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpAccordionPanelExpanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 800,
                            "end": 818,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 801,
                                "end": 808,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDetermines whether the panel should be expanded.\n",
                    "description": "<p>Determines whether the panel should be expanded.</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "ngpAccordionPanelExpandedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when the panel is expanded.\n",
                    "description": "<p>Event emitted when the panel is expanded.</p>\n",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "accordion",
                    "defaultValue": "injectAccordion()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the accordion the panel belongs to.</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nAccess the accordion the panel belongs to.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`ngp-accordion-panel-${uniqueId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The unique id of the panel.</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nThe unique id of the panel.\n",
                    "modifierKind": [
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1305,
                            "end": 1318,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1306,
                                "end": 1314,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isExpanded",
                    "defaultValue": "computed(() => this.accordion.expanded().includes(this.id))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Determine if this panel is expanded.</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nDetermine if this panel is expanded.\n",
                    "modifierKind": [
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1428,
                            "end": 1441,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1429,
                                "end": 1437,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle the expanded state of the panel.\n",
                    "description": "<p>Toggle the expanded state of the panel.</p>\n"
                }
            ]
        },
        {
            "name": "NgpAccordionStateDirective",
            "id": "directive-NgpAccordionStateDirective-e6e941d59c5455abf531af29941a6127ebead950e60caca816715fe6f4981077aa8d76d0dc6c11448f160f66059bfe30f3363ab28e0acb87a4b74d263398600d",
            "file": "packages/ng-primitives/accordion/src/common/accordion-state.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed } from '@angular/core';\nimport { injectAccordionPanel } from '../accordion-panel/accordion-panel.token';\nimport { injectAccordion } from '../accordion/accordion.token';\n\n@Directive({\n  standalone: true,\n  host: {\n    '[attr.data-state]': 'state()',\n    '[attr.data-disabled]': 'isDisabled',\n    '[attr.data-orientation]': 'orientation',\n  },\n})\nexport class NgpAccordionStateDirective {\n  /**\n   * Access the accordion the trigger belongs to.\n   */\n  private readonly accordion = injectAccordion();\n\n  /**\n   * Access the panel the trigger belongs to.\n   */\n  private readonly panel = injectAccordionPanel();\n\n  /**\n   * Determine the expanded state of the panel.\n   * @internal\n   */\n  readonly state = computed(() => (this.panel.isExpanded() ? 'open' : 'closed'));\n\n  /**\n   * Determine the disabled state of the panel.\n   * @internal\n   */\n  get isDisabled(): boolean {\n    return this.panel.disabled || this.accordion.disabled;\n  }\n\n  /**\n   * Determine the orientation of the accordion.\n   * @internal\n   */\n  get orientation(): 'horizontal' | 'vertical' {\n    return this.accordion.orientation;\n  }\n}\n",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "accordion",
                    "defaultValue": "injectAccordion()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the accordion the trigger belongs to.</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nAccess the accordion the trigger belongs to.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "panel",
                    "defaultValue": "injectAccordionPanel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the panel the trigger belongs to.</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nAccess the panel the trigger belongs to.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "computed(() => (this.panel.isExpanded() ? 'open' : 'closed'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Determine the expanded state of the panel.</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nDetermine the expanded state of the panel.\n",
                    "modifierKind": [
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 698,
                            "end": 711,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 699,
                                "end": 707,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "accessors": {
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 34,
                        "rawdescription": "\n\nDetermine the disabled state of the panel.\n",
                        "description": "<p>Determine the disabled state of the panel.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 856,
                                "end": 869,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 330,
                                "tagName": {
                                    "pos": 857,
                                    "end": 865,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "internal"
                                },
                                "comment": ""
                            }
                        ]
                    }
                },
                "orientation": {
                    "name": "orientation",
                    "getSignature": {
                        "name": "orientation",
                        "type": "",
                        "returnType": "\"horizontal\" | \"vertical\"",
                        "line": 42,
                        "rawdescription": "\n\nDetermine the orientation of the accordion.\n",
                        "description": "<p>Determine the orientation of the accordion.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 1026,
                                "end": 1039,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 330,
                                "tagName": {
                                    "pos": 1027,
                                    "end": 1035,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "internal"
                                },
                                "comment": ""
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "NgpAccordionTriggerDirective",
            "id": "directive-NgpAccordionTriggerDirective-5d4e9de250e0ac5c212bab044deb9ba13f607195b347b83f93a1efab6708aa7bdec1ee030b90584fa52d8a92aad23571efcb887f66ddfb79b69c91b8456b62ec",
            "file": "packages/ng-primitives/accordion/src/accordion-trigger/accordion-trigger.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, inject } from '@angular/core';\nimport { NgpAccordionPanelToken } from '../accordion-panel/accordion-panel.token';\nimport { NgpAccordionStateDirective } from '../common/accordion-state.directive';\n\n@Directive({\n  selector: '[ngpAccordionTrigger]',\n  standalone: true,\n  hostDirectives: [NgpAccordionStateDirective],\n  host: {\n    '[id]': 'triggerId',\n    '[attr.aria-expanded]': 'panel.isExpanded()',\n    '[attr.aria-controls]': 'contentId',\n  },\n})\nexport class NgpAccordionTriggerDirective {\n  /**\n   * Access the panel the trigger belongs to.\n   */\n  protected readonly panel = inject(NgpAccordionPanelToken);\n\n  /**\n   * Derive the id of the trigger.\n   */\n  protected get triggerId(): string {\n    return `${this.panel.id}-trigger`;\n  }\n\n  /**\n   * Get the id of the panel content.\n   * @internal\n   */\n  protected readonly contentId = `${this.panel.id}-content`;\n\n  /**\n   * Toggle the expanded state of the panel.\n   */\n  @HostListener('click')\n  toggle(): void {\n    this.panel.toggle();\n  }\n}\n",
            "selector": "[ngpAccordionTrigger]",
            "providers": [],
            "hostDirectives": [
                {
                    "name": "NgpAccordionStateDirective"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle the expanded state of the panel.\n",
                    "description": "<p>Toggle the expanded state of the panel.</p>\n",
                    "line": 38
                }
            ],
            "propertiesClass": [
                {
                    "name": "contentId",
                    "defaultValue": "`${this.panel.id}-content`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Get the id of the panel content.</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nGet the id of the panel content.\n",
                    "modifierKind": [
                        122,
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 825,
                            "end": 838,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 826,
                                "end": 834,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "panel",
                    "defaultValue": "inject(NgpAccordionPanelToken)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the panel the trigger belongs to.</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nAccess the panel the trigger belongs to.\n",
                    "modifierKind": [
                        122,
                        146
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle the expanded state of the panel.\n",
                    "description": "<p>Toggle the expanded state of the panel.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "accessors": {
                "triggerId": {
                    "name": "triggerId",
                    "getSignature": {
                        "name": "triggerId",
                        "type": "string",
                        "returnType": "string",
                        "line": 24,
                        "rawdescription": "\n\nDerive the id of the trigger.\n",
                        "description": "<p>Derive the id of the trigger.</p>\n"
                    }
                }
            }
        },
        {
            "name": "NgpAvatarDirective",
            "id": "directive-NgpAvatarDirective-9ab12b7f4da82fe5d7e667b0fb7a91e8879c26468025691f087ad7495239bd1e2a93e41a7f72879b2b24e58feb9260777ef5a79f50d1fbf250b9e2355b7c2277",
            "file": "packages/ng-primitives/avatar/src/avatar/avatar.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\nimport { NgpAvatarToken } from './avatar.token';\n\n@Directive({\n  selector: '[ngpAvatar]',\n  standalone: true,\n  providers: [{ provide: NgpAvatarToken, useExisting: NgpAvatarDirective }],\n})\nexport class NgpAvatarDirective {\n  /**\n   * Store the current state of the avatar.\n   * @internal\n   */\n  state: NgpAvatarState = NgpAvatarState.Idle;\n\n  /**\n   * Set the avatar state.\n   * @param state The state to set.\n   * @internal\n   */\n  setState(state: NgpAvatarState): void {\n    this.state = state;\n  }\n}\n\nexport enum NgpAvatarState {\n  Idle,\n  Loading,\n  Loaded,\n  Error,\n}\n",
            "selector": "[ngpAvatar]",
            "providers": [
                {
                    "name": "{ provide: NgpAvatarToken, useExisting: NgpAvatarDirective }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "state",
                    "defaultValue": "NgpAvatarState.Idle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgpAvatarState",
                    "optional": false,
                    "description": "<p>Store the current state of the avatar.</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nStore the current state of the avatar.\n",
                    "jsdoctags": [
                        {
                            "pos": 322,
                            "end": 335,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 323,
                                "end": 331,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "NgpAvatarState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the avatar state.\n",
                    "description": "<p>Set the avatar state.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 431,
                                "end": 436,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "state"
                            },
                            "type": "NgpAvatarState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 425,
                                "end": 430,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The state to set.</p>\n"
                        }
                    ]
                }
            ]
        },
        {
            "name": "NgpAvatarFallbackDirective",
            "id": "directive-NgpAvatarFallbackDirective-1db16d890a1b47a07fa4c6b9fa11136dbe0fdbe7a17ad16beda2d6f81dae84b3253fc3d000fe28aab185fee8f84f58a212fe4f6caf4d543a9de1d7642b291048",
            "file": "packages/ng-primitives/avatar/src/avatar-fallback/avatar-fallback.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnDestroy, OnInit, numberAttribute } from '@angular/core';\nimport { NgpAvatarState } from '../avatar/avatar.directive';\nimport { injectAvatar } from '../avatar/avatar.token';\nimport { injectAvatarConfig } from '../config/avatar.config';\n\n@Directive({\n  selector: '[ngpAvatarFallback]',\n  standalone: true,\n  host: {\n    '[style.display]': 'visible ? null : \"none\"',\n  },\n})\nexport class NgpAvatarFallbackDirective implements OnInit, OnDestroy {\n  /**\n   * Access the avatar\n   */\n  private readonly avatar = injectAvatar();\n\n  /**\n   * Access the global configuration.\n   */\n  private readonly config = injectAvatarConfig();\n\n  /**\n   * Define a delay before the fallback is shown. This is useful to only show the fallback for those with slower connections.\n   * @default 0\n   */\n  @Input({ alias: 'ngpAvatarFallbackDelay', transform: numberAttribute }) delay: number =\n    this.config.delay;\n\n  /**\n   * Determine if this element should be hidden.\n   */\n  protected get visible(): boolean {\n    // we need to check if the element can render and if the avatar is not in a loaded state\n    return this.delayElapsed && this.avatar.state !== NgpAvatarState.Loaded;\n  }\n\n  /**\n   * Determine the delay has elapsed, and we can show the fallback.\n   */\n  private delayElapsed: boolean = false;\n\n  /**\n   * Store the timeout id.\n   */\n  private timeoutId: number | null = null;\n\n  ngOnInit(): void {\n    this.timeoutId = window.setTimeout(() => (this.delayElapsed = true), this.delay);\n  }\n\n  ngOnDestroy(): void {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n}\n",
            "selector": "[ngpAvatarFallback]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpAvatarFallbackDelay",
                    "defaultValue": "this.config.delay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 790,
                            "end": 804,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 791,
                                "end": 798,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine a delay before the fallback is shown. This is useful to only show the fallback for those with slower connections.\n",
                    "description": "<p>Define a delay before the fallback is shown. This is useful to only show the fallback for those with slower connections.</p>\n",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "avatar",
                    "defaultValue": "injectAvatar()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the avatar</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nAccess the avatar\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "config",
                    "defaultValue": "injectAvatarConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the global configuration.</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nAccess the global configuration.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "delayElapsed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Determine the delay has elapsed, and we can show the fallback.</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nDetermine the delay has elapsed, and we can show the fallback.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "timeoutId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "<p>Store the timeout id.</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nStore the timeout id.\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "visible": {
                    "name": "visible",
                    "getSignature": {
                        "name": "visible",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 34,
                        "rawdescription": "\n\nDetermine if this element should be hidden.\n",
                        "description": "<p>Determine if this element should be hidden.</p>\n"
                    }
                }
            }
        },
        {
            "name": "NgpAvatarImageDirective",
            "id": "directive-NgpAvatarImageDirective-f79bfa1d2a1552cbebbfdf6c3f38193430db733978f02f49a8075e03bd2b3445dd3705d27dd4c5615fc0762347d799d7a6fae55093faac7d20c815d522d10553",
            "file": "packages/ng-primitives/avatar/src/avatar-image/avatar-image.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, OnInit, inject } from '@angular/core';\nimport { NgpAvatarState } from '../avatar/avatar.directive';\nimport { injectAvatar } from '../avatar/avatar.token';\n\n@Directive({\n  selector: 'img[ngpAvatarImage]',\n  standalone: true,\n})\nexport class NgpAvatarImageDirective implements OnInit {\n  /**\n   * Access the avatar\n   */\n  private readonly avatar = injectAvatar();\n\n  /**\n   * Access the image element ref.\n   */\n  private readonly elementRef = inject<ElementRef<HTMLImageElement>>(ElementRef);\n\n  ngOnInit(): void {\n    // mark the avatar as loading\n    this.avatar.setState(NgpAvatarState.Loading);\n\n    // if there is no src, we can report this as an error\n    if (!this.elementRef.nativeElement.src) {\n      this.avatar.setState(NgpAvatarState.Error);\n    }\n\n    // if the image has already loaded, we can report this to the avatar\n    if (this.elementRef.nativeElement.complete) {\n      this.avatar.setState(NgpAvatarState.Loaded);\n    }\n  }\n\n  @HostListener('load')\n  onLoad(): void {\n    this.avatar.setState(NgpAvatarState.Loaded);\n  }\n\n  @HostListener('error')\n  onError(): void {\n    this.avatar.setState(NgpAvatarState.Error);\n  }\n}\n",
            "selector": "img[ngpAvatarImage]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "error",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41
                },
                {
                    "name": "load",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                }
            ],
            "propertiesClass": [
                {
                    "name": "avatar",
                    "defaultValue": "injectAvatar()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the avatar</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nAccess the avatar\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "elementRef",
                    "defaultValue": "inject<ElementRef<HTMLImageElement>>(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the image element ref.</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nAccess the image element ref.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'error'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "onLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'load'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "NgpOverlayArrowDirective",
            "id": "directive-NgpOverlayArrowDirective-fd3755deeaad3d7119e668290eb8bdbdaefd6b1e36e3e879d29d8b25c1a206713704acfc411ec425e78d755473bc9b1d798c78e081e45f87d323fb75f587d2d1",
            "file": "packages/ng-primitives/overlay/src/overlay-arrow/overlay-arrow.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, OnDestroy, OnInit, inject } from '@angular/core';\nimport { Placement } from '@floating-ui/dom';\nimport { injectOverlayTrigger } from '../overlay-trigger/overlay-trigger.token';\nimport { NgpOverlayArrowToken } from './overlay-arrow.token';\n\n@Directive({\n  selector: '[ngpOverlayArrow]',\n  standalone: true,\n  providers: [{ provide: NgpOverlayArrowToken, useExisting: NgpOverlayArrowDirective }],\n})\nexport class NgpOverlayArrowDirective implements OnInit, OnDestroy {\n  /**\n   * Access the arrow element\n   */\n  readonly elementRef = inject(ElementRef<HTMLElement>);\n\n  /**\n   * Access the overlay trigger\n   */\n  private readonly overlayTrigger = injectOverlayTrigger();\n\n  /**\n   * Register the arrow on init\n   * @internal\n   */\n  ngOnInit(): void {\n    this.overlayTrigger.registerArrow(this);\n  }\n\n  /**\n   * Unregister the arrow on destroy\n   * @internal\n   */\n  ngOnDestroy(): void {\n    this.overlayTrigger.unregisterArrow();\n  }\n\n  /**\n   * Define the position of the arrow.\n   */\n  setPosition(placement: Placement, arrowX?: number, arrowY?: number): void {\n    const staticSide = {\n      top: 'bottom',\n      right: 'left',\n      bottom: 'top',\n      left: 'right',\n    }[placement.split('-')[0]] as string;\n\n    Object.assign(this.elementRef.nativeElement.style, {\n      left: arrowX != null ? `${arrowX}px` : '',\n      top: arrowY != null ? `${arrowY}px` : '',\n      right: '',\n      bottom: '',\n      [staticSide]: `-${this.elementRef.nativeElement.offsetWidth / 2}px`,\n    });\n  }\n}\n",
            "selector": "[ngpOverlayArrow]",
            "providers": [
                {
                    "name": "{ provide: NgpOverlayArrowToken, useExisting: NgpOverlayArrowDirective }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef<HTMLElement>)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the arrow element</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nAccess the arrow element\n",
                    "modifierKind": [
                        146
                    ]
                },
                {
                    "name": "overlayTrigger",
                    "defaultValue": "injectOverlayTrigger()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the overlay trigger</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nAccess the overlay trigger\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setPosition",
                    "args": [
                        {
                            "name": "placement",
                            "type": "Placement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "arrowX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "arrowY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the position of the arrow.\n",
                    "description": "<p>Define the position of the arrow.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "placement",
                            "type": "Placement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arrowX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arrowY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "NgpOverlayDirective",
            "id": "directive-NgpOverlayDirective-5128bd9a69781af826290868ec25c19d5a0fb470c7bacca19f10a4f50472de2bd91e72b3c9ce7d98b42444bbf79c85f063f72f6870f8153a6008f592d9d5d93e",
            "file": "packages/ng-primitives/overlay/src/overlay/overlay.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, OnDestroy, OnInit, inject } from '@angular/core';\nimport { injectOverlayTrigger } from '../overlay-trigger/overlay-trigger.token';\nimport { NgpOverlayToken } from './overlay.token';\n\n@Directive({\n  selector: '[ngpOverlay]',\n  standalone: true,\n  providers: [{ provide: NgpOverlayToken, useExisting: NgpOverlayDirective }],\n})\nexport class NgpOverlayDirective implements OnInit, OnDestroy {\n  /**\n   * Access the overlay element\n   */\n  private readonly elementRef = inject(ElementRef<HTMLElement>);\n\n  /**\n   * Access the overlay trigger\n   */\n  private readonly overlayTrigger = injectOverlayTrigger();\n\n  /**\n   * Register the overlay on init\n   */\n  ngOnInit(): void {\n    this.overlayTrigger.registerOverlay(this);\n  }\n\n  /**\n   * Unregister the overlay on destroy\n   */\n  ngOnDestroy(): void {\n    this.overlayTrigger.unregisterOverlay();\n  }\n\n  /**\n   * Set the position of the overlay\n   * @param x The x position\n   * @param y The y position\n   * @internal\n   */\n  setPosition(x?: number, y?: number): void {\n    Object.assign(this.elementRef.nativeElement.style, {\n      left: `${x}px`,\n      top: `${y}px`,\n    });\n  }\n}\n",
            "selector": "[ngpOverlay]",
            "providers": [
                {
                    "name": "{ provide: NgpOverlayToken, useExisting: NgpOverlayDirective }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef<HTMLElement>)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the overlay element</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nAccess the overlay element\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "overlayTrigger",
                    "defaultValue": "injectOverlayTrigger()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the overlay trigger</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nAccess the overlay trigger\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setPosition",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the position of the overlay\n",
                    "description": "<p>Set the position of the overlay</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 936,
                                "end": 937,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "x"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 930,
                                "end": 935,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The x position</p>\n"
                        },
                        {
                            "name": {
                                "pos": 965,
                                "end": 966,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "y"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 959,
                                "end": 964,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The y position</p>\n"
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "NgpOverlayTriggerDirective",
            "id": "directive-NgpOverlayTriggerDirective-42a7ee341e81a8e7eb193372df2464dcbd3766c81d321dd29926846c5da53baf22f9656d5775a35664fea03050ef026d3a465da4dc4e9f61b5a5f38ded1dba3c",
            "file": "packages/ng-primitives/overlay/src/overlay-trigger/overlay-trigger.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DomPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  Injector,\n  Input,\n  StaticProvider,\n  TemplateRef,\n  ViewContainerRef,\n  booleanAttribute,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport {\n  Middleware,\n  Placement,\n  arrow,\n  autoUpdate,\n  computePosition,\n  flip,\n  offset,\n  shift,\n} from '@floating-ui/dom';\nimport type { NgpOverlayArrowDirective } from '../overlay-arrow/overlay-arrow.directive';\nimport type { NgpOverlayDirective } from '../overlay/overlay.directive';\nimport { NgpOverlayTriggerToken } from './overlay-trigger.token';\n\n@Directive({\n  selector: '[ngpOverlayTrigger]',\n  standalone: true,\n  exportAs: 'ngpOverlayTrigger',\n  host: {\n    '[attr.data-state]': 'state',\n  },\n})\nexport class NgpOverlayTriggerDirective {\n  /**\n   * Access the application ref\n   */\n  private readonly appRef = inject(ApplicationRef);\n\n  /**\n   * Access the component factory resolver\n   */\n  private readonly componentFactoryResolver = inject(ComponentFactoryResolver);\n\n  /**\n   * Access the injector\n   */\n  private readonly injector = inject(Injector);\n\n  /**\n   * Access the trigger element\n   */\n  private readonly trigger = inject(ElementRef<HTMLElement>);\n\n  /**\n   * Access the view container\n   */\n  private readonly viewContainer = inject(ViewContainerRef);\n\n  /**\n   * Define the overlay to display when the trigger is activated.\n   */\n  @Input({ alias: 'ngpOverlayTrigger', required: true }) templateRef!: TemplateRef<void>;\n\n  /**\n   * Define if the trigger should be disabled.\n   * @default false\n   */\n  @Input({ alias: 'ngpOverlayDisabled', transform: booleanAttribute }) disabled: boolean = false;\n\n  /**\n   * Define the placement of the overlay relative to the trigger.\n   * @default 'bottom'\n   */\n  @Input('ngpOverlayPlacement') placement: Placement = 'top';\n\n  /**\n   * Define the offset of the overlay relative to the trigger.\n   * @default 4\n   */\n  @Input({ alias: 'ngpOverlayOffset', transform: numberAttribute }) offset: number = 4;\n\n  /**\n   * Define the delay before the overlay is displayed.\n   * @default 0\n   */\n  @Input({ alias: 'ngpOverlayShowDelay', transform: numberAttribute }) showDelay: number = 0;\n\n  /**\n   * Define the delay before the overlay is hidden.\n   * @default 0\n   */\n  @Input({ alias: 'ngpOverlayHideDelay', transform: numberAttribute }) hideDelay: number = 0;\n\n  /**\n   * Define whether the overlay should shift when the overlay is near the edge of the viewport.\n   * @default true\n   */\n  @Input({ alias: 'ngpOverlayShift', transform: booleanAttribute }) shift: boolean = true;\n\n  /**\n   * Define whether the overlay should flip when there is not enough space for the overlay.\n   * @default true\n   */\n  @Input({ alias: 'ngpOverlayFlip', transform: booleanAttribute }) flip: boolean = true;\n\n  /**\n   * Define the container in to which the overlay should be attached.\n   * @default document.body\n   */\n  @Input('ngpOverlayContainer') container: HTMLElement = document.body;\n\n  /**\n   * Store the overlay content instance.\n   */\n  private overlay: NgpOverlayDirective | null = null;\n\n  /**\n   * Store the overlay arrow instance.\n   */\n  private arrow: NgpOverlayArrowDirective | null = null;\n\n  /**\n   * Store the view ref\n   */\n  private viewRef: EmbeddedViewRef<void> | null = null;\n\n  /**\n   * Store the show delay timeout\n   */\n  private showDelayTimeout: number | null = null;\n\n  /**\n   * Store the hide delay timeout\n   */\n  private hideDelayTimeout: number | null = null;\n\n  /**\n   * Store the dispose function\n   */\n  private dispose?: () => void;\n\n  /**\n   * Store additional providers to register on the overlay.\n   */\n  private readonly providers: StaticProvider[] = [];\n\n  /**\n   * Determine the state of the overlay.\n   */\n  private get isOpen(): boolean {\n    return !!this.viewRef;\n  }\n\n  /**\n   * Determine the state of the overlay.\n   */\n  protected get state(): 'closed' | 'opening' | 'open' | 'closing' {\n    if (this.showDelayTimeout) {\n      return 'opening';\n    }\n\n    if (this.hideDelayTimeout) {\n      return 'closing';\n    }\n\n    return this.isOpen ? 'open' : 'closed';\n  }\n\n  /**\n   * Create the overlay.\n   */\n  private createOverlay(): void {\n    const domPortal = new DomPortalOutlet(\n      this.container,\n      this.componentFactoryResolver,\n      this.appRef,\n      this.injector,\n    );\n\n    const templatePortal = new TemplatePortal(\n      this.templateRef,\n      this.viewContainer,\n      undefined,\n      Injector.create({\n        parent: this.injector,\n        providers: [\n          {\n            provide: NgpOverlayTriggerToken,\n            useValue: this,\n          },\n          ...this.providers,\n        ],\n      }),\n    );\n\n    this.viewRef = domPortal.attach(templatePortal);\n    this.viewRef.detectChanges();\n\n    this.updateOverlayPosition();\n    this.showDelayTimeout = null;\n  }\n\n  /**\n   * Update the overlay position.\n   */\n  private updateOverlayPosition(): void {\n    if (!this.viewRef) {\n      return;\n    }\n\n    const overlayElement = this.viewRef.rootNodes[0] as HTMLElement;\n\n    const middleware: Middleware[] = [];\n\n    if (this.offset) {\n      middleware.push(offset(this.offset));\n    }\n\n    if (this.shift) {\n      middleware.push(shift());\n    }\n\n    if (this.flip) {\n      middleware.push(flip());\n    }\n\n    // if there is an arrow defined, we need to add the arrow middleware\n    if (this.arrow) {\n      middleware.push(arrow({ element: this.arrow.elementRef.nativeElement }));\n    }\n\n    this.dispose = autoUpdate(this.trigger.nativeElement, overlayElement, async () => {\n      const position = await computePosition(this.trigger.nativeElement, overlayElement, {\n        placement: this.placement,\n        middleware,\n      });\n\n      this.overlay?.setPosition(position.x, position.y);\n\n      if (position.middlewareData.arrow) {\n        this.arrow?.setPosition(\n          this.placement,\n          position.middlewareData.arrow.x,\n          position.middlewareData.arrow.y,\n        );\n      }\n    });\n  }\n\n  /**\n   * Destroy the overlay.\n   */\n  private destroyOverlay(): void {\n    this.viewRef?.destroy();\n    this.viewRef = null;\n\n    this.dispose?.();\n    this.hideDelayTimeout = null;\n  }\n\n  /**\n   * Show the overlay.\n   */\n  show(): void {\n    if (this.disabled || this.isOpen) {\n      return;\n    }\n\n    if (this.hideDelayTimeout) {\n      clearTimeout(this.hideDelayTimeout);\n      this.hideDelayTimeout = null;\n    }\n\n    this.showDelayTimeout = window.setTimeout(() => this.createOverlay(), this.showDelay);\n  }\n\n  /**\n   * Hide the overlay.\n   */\n  hide(): void {\n    if (!this.isOpen) {\n      return;\n    }\n\n    if (this.showDelayTimeout) {\n      clearTimeout(this.showDelayTimeout);\n      this.showDelayTimeout = null;\n    }\n\n    this.hideDelayTimeout = window.setTimeout(() => this.destroyOverlay(), this.hideDelay);\n  }\n\n  /**\n   * Register the overlay.\n   * @param overlay The overlay to register.\n   * @internal\n   */\n  registerOverlay(overlay: NgpOverlayDirective): void {\n    this.overlay = overlay;\n  }\n\n  /**\n   * Unregister the overlay.\n   * @internal\n   */\n  unregisterOverlay(): void {\n    this.overlay = null;\n  }\n\n  /**\n   * Register the arrow.\n   * @param arrow The arrow to register.\n   * @internal\n   */\n  registerArrow(arrow: NgpOverlayArrowDirective): void {\n    this.arrow = arrow;\n  }\n\n  /**\n   * Unregister the arrow.\n   * @internal\n   */\n  unregisterArrow(): void {\n    this.arrow = null;\n  }\n\n  /**\n   * Register a provider on the overlay.\n   * @param provider The provider to register.\n   * @internal\n   */\n  registerProvider(provider: StaticProvider): void {\n    this.providers.push(provider);\n  }\n}\n",
            "selector": "[ngpOverlayTrigger]",
            "providers": [],
            "exportAs": "ngpOverlayTrigger",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "ngpOverlayContainer",
                    "defaultValue": "document.body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2964,
                            "end": 2990,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 2965,
                                "end": 2972,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>document.body</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the container in to which the overlay should be attached.\n",
                    "description": "<p>Define the container in to which the overlay should be attached.</p>\n",
                    "line": 116,
                    "type": "HTMLElement",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpOverlayDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1634,
                            "end": 1652,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1635,
                                "end": 1642,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine if the trigger should be disabled.\n",
                    "description": "<p>Define if the trigger should be disabled.</p>\n",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpOverlayFlip",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2773,
                            "end": 2790,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 2774,
                                "end": 2781,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine whether the overlay should flip when there is not enough space for the overlay.\n",
                    "description": "<p>Define whether the overlay should flip when there is not enough space for the overlay.</p>\n",
                    "line": 110,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpOverlayHideDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2339,
                            "end": 2353,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 2340,
                                "end": 2347,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the delay before the overlay is hidden.\n",
                    "description": "<p>Define the delay before the overlay is hidden.</p>\n",
                    "line": 98,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpOverlayOffset",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1992,
                            "end": 2006,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1993,
                                "end": 2000,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>4</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the offset of the overlay relative to the trigger.\n",
                    "description": "<p>Define the offset of the overlay relative to the trigger.</p>\n",
                    "line": 86,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "ngpOverlayPlacement",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1831,
                            "end": 1852,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1832,
                                "end": 1839,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;bottom&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the placement of the overlay relative to the trigger.\n",
                    "description": "<p>Define the placement of the overlay relative to the trigger.</p>\n",
                    "line": 80,
                    "type": "Placement",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpOverlayShift",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2558,
                            "end": 2575,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 2559,
                                "end": 2566,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine whether the overlay should shift when the overlay is near the edge of the viewport.\n",
                    "description": "<p>Define whether the overlay should shift when the overlay is near the edge of the viewport.</p>\n",
                    "line": 104,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpOverlayShowDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2164,
                            "end": 2178,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 2165,
                                "end": 2172,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the delay before the overlay is displayed.\n",
                    "description": "<p>Define the delay before the overlay is displayed.</p>\n",
                    "line": 92,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "ngpOverlayTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nDefine the overlay to display when the trigger is activated.\n",
                    "description": "<p>Define the overlay to display when the trigger is activated.</p>\n",
                    "line": 68,
                    "type": "TemplateRef<void>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "appRef",
                    "defaultValue": "inject(ApplicationRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the application ref</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nAccess the application ref\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "arrow",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgpOverlayArrowDirective | null",
                    "optional": false,
                    "description": "<p>Store the overlay arrow instance.</p>\n",
                    "line": 126,
                    "rawdescription": "\n\nStore the overlay arrow instance.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "componentFactoryResolver",
                    "defaultValue": "inject(ComponentFactoryResolver)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the component factory resolver</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nAccess the component factory resolver\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "dispose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Store the dispose function</p>\n",
                    "line": 146,
                    "rawdescription": "\n\nStore the dispose function\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hideDelayTimeout",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "<p>Store the hide delay timeout</p>\n",
                    "line": 141,
                    "rawdescription": "\n\nStore the hide delay timeout\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "injector",
                    "defaultValue": "inject(Injector)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the injector</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nAccess the injector\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "overlay",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgpOverlayDirective | null",
                    "optional": false,
                    "description": "<p>Store the overlay content instance.</p>\n",
                    "line": 121,
                    "rawdescription": "\n\nStore the overlay content instance.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "providers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StaticProvider[]",
                    "optional": false,
                    "description": "<p>Store additional providers to register on the overlay.</p>\n",
                    "line": 151,
                    "rawdescription": "\n\nStore additional providers to register on the overlay.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "showDelayTimeout",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "<p>Store the show delay timeout</p>\n",
                    "line": 136,
                    "rawdescription": "\n\nStore the show delay timeout\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "trigger",
                    "defaultValue": "inject(ElementRef<HTMLElement>)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the trigger element</p>\n",
                    "line": 58,
                    "rawdescription": "\n\nAccess the trigger element\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "viewContainer",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the view container</p>\n",
                    "line": 63,
                    "rawdescription": "\n\nAccess the view container\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "viewRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmbeddedViewRef<void> | null",
                    "optional": false,
                    "description": "<p>Store the view ref</p>\n",
                    "line": 131,
                    "rawdescription": "\n\nStore the view ref\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate the overlay.\n",
                    "description": "<p>Create the overlay.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "destroyOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDestroy the overlay.\n",
                    "description": "<p>Destroy the overlay.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the overlay.\n",
                    "description": "<p>Hide the overlay.</p>\n"
                },
                {
                    "name": "registerArrow",
                    "args": [
                        {
                            "name": "arrow",
                            "type": "NgpOverlayArrowDirective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister the arrow.\n",
                    "description": "<p>Register the arrow.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7241,
                                "end": 7246,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "arrow"
                            },
                            "type": "NgpOverlayArrowDirective",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7235,
                                "end": 7240,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The arrow to register.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOverlay",
                    "args": [
                        {
                            "name": "overlay",
                            "type": "NgpOverlayDirective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister the overlay.\n",
                    "description": "<p>Register the overlay.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6939,
                                "end": 6946,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "overlay"
                            },
                            "type": "NgpOverlayDirective",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6933,
                                "end": 6938,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The overlay to register.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerProvider",
                    "args": [
                        {
                            "name": "provider",
                            "type": "StaticProvider",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 338,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister a provider on the overlay.\n",
                    "description": "<p>Register a provider on the overlay.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7546,
                                "end": 7554,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "provider"
                            },
                            "type": "StaticProvider",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7540,
                                "end": 7545,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The provider to register.</p>\n"
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the overlay.\n",
                    "description": "<p>Show the overlay.</p>\n"
                },
                {
                    "name": "unregisterArrow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 329,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnregister the arrow.\n",
                    "description": "<p>Unregister the arrow.</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "unregisterOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnregister the overlay.\n",
                    "description": "<p>Unregister the overlay.</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "updateOverlayPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the overlay position.\n",
                    "description": "<p>Update the overlay position.</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "accessors": {
                "isOpen": {
                    "name": "isOpen",
                    "getSignature": {
                        "name": "isOpen",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 156,
                        "rawdescription": "\n\nDetermine the state of the overlay.\n",
                        "description": "<p>Determine the state of the overlay.</p>\n"
                    }
                },
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "\"closed\" | \"opening\" | \"open\" | \"closing\"",
                        "line": 163,
                        "rawdescription": "\n\nDetermine the state of the overlay.\n",
                        "description": "<p>Determine the state of the overlay.</p>\n"
                    }
                }
            }
        },
        {
            "name": "NgpProgressDirective",
            "id": "directive-NgpProgressDirective-e131d3840eb7df999c46e6b10adbaaa6664b6d7ddd36ec9b3a01dd45e72f70e27871793d61add8f56a0d32e2a96868b7e27545fad623ab8b3c6d0c13087b6f6f",
            "file": "packages/ng-primitives/progress/src/progress/progress.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, numberAttribute } from '@angular/core';\nimport { NgpProgressToken } from './progress.token';\n\n@Directive({\n  selector: '[ngpProgress]',\n  standalone: true,\n  providers: [{ provide: NgpProgressToken, useExisting: NgpProgressDirective }],\n  host: {\n    role: 'progressbar',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': '0',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-valuetext]': 'valueLabel(value, max)',\n    '[attr.data-state]': 'state',\n    '[attr.data-value]': 'value',\n    '[attr.data-max]': 'max',\n  },\n})\nexport class NgpProgressDirective {\n  /**\n   * Define the progress value.\n   */\n  @Input({ alias: 'ngpProgressValue', transform: numberAttribute }) value: number = 0;\n\n  /**\n   * Define the progress max value.\n   * @default 100\n   */\n  @Input({ alias: 'ngpProgressMax', transform: numberAttribute }) max: number = 100;\n\n  /**\n   * Define a function that returns the progress value label.\n   */\n  @Input('ngpProgressValueLabel') valueLabel: (value: number, max: number) => string = (\n    value,\n    max,\n  ) => `${Math.round((value / max) * 100)}%`;\n\n  /**\n   * Get the state of the progress bar.\n   * @returns 'indeterminate' | 'loading' | 'complete'\n   * @internal\n   */\n  get state(): 'indeterminate' | 'loading' | 'complete' {\n    return this.value == null ? 'indeterminate' : this.value === this.max ? 'complete' : 'loading';\n  }\n}\n",
            "selector": "[ngpProgress]",
            "providers": [
                {
                    "name": "{ provide: NgpProgressToken, useExisting: NgpProgressDirective }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpProgressMax",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 780,
                            "end": 796,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 781,
                                "end": 788,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>100</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the progress max value.\n",
                    "description": "<p>Define the progress max value.</p>\n",
                    "line": 29,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpProgressValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the progress value.\n",
                    "description": "<p>Define the progress value.</p>\n",
                    "line": 23,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "ngpProgressValueLabel",
                    "defaultValue": "(\n    value,\n    max,\n  ) => `${Math.round((value / max) * 100)}%`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine a function that returns the progress value label.\n",
                    "description": "<p>Define a function that returns the progress value label.</p>\n",
                    "line": 34,
                    "type": "function",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "accessors": {
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "\"indeterminate\" | \"loading\" | \"complete\"",
                        "line": 44,
                        "rawdescription": "\n\nGet the state of the progress bar.\n",
                        "description": "<p>Get the state of the progress bar.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 1166,
                                "end": 1221,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 345,
                                "tagName": {
                                    "pos": 1167,
                                    "end": 1174,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>&#39;indeterminate&#39; | &#39;loading&#39; | &#39;complete&#39;</p>\n"
                            },
                            {
                                "pos": 1221,
                                "end": 1234,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 330,
                                "tagName": {
                                    "pos": 1222,
                                    "end": 1230,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "internal"
                                },
                                "comment": ""
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "NgpProgressIndicatorDirective",
            "id": "directive-NgpProgressIndicatorDirective-de50d79d35630a4efd78a528d8592eae7069d9de94c04883506f985b8736277514c1bf4d6d6c7431afa0209a2f148b1b45bdd235bcc1caad2a8f9436a70562e2",
            "file": "packages/ng-primitives/progress/src/progress-indicator/progress-indicator.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\nimport { injectProgress } from '../progress/progress.token';\n\n@Directive({\n  selector: '[ngpProgressIndicator]',\n  standalone: true,\n  host: {\n    '[attr.data-state]': 'progress.state',\n    '[attr.data-value]': 'progress.value',\n    '[attr.data-max]': 'progress.max',\n  },\n})\nexport class NgpProgressIndicatorDirective {\n  /**\n   * Access the progress directive.\n   */\n  protected readonly progress = injectProgress();\n}\n",
            "selector": "[ngpProgressIndicator]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "progress",
                    "defaultValue": "injectProgress()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the progress directive.</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nAccess the progress directive.\n",
                    "modifierKind": [
                        122,
                        146
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "NgpResizeDirective",
            "id": "directive-NgpResizeDirective-02e080e0dc7c9156f0d2dbd8578628f17185cbb986b496552ff175cf50a92d71c43d42e04bbc778263f9811e98ac80c6fd8c092c78c16e0ce074079d9e93dc2a",
            "file": "packages/ng-primitives/resize/src/resize/resize.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  DestroyRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  NgZone,\n  OnInit,\n  Output,\n  inject,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ResizeEvent, fromResizeEvent } from '../utils/resize';\n\n@Directive({\n  selector: '[ngpResize]',\n  standalone: true,\n})\nexport class NgpResizeDirective implements OnInit {\n  /**\n   * Access the element.\n   */\n  private readonly element = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /**\n   * Access NgZone.\n   */\n  private readonly ngZone = inject(NgZone);\n\n  /**\n   * Access the destroy ref\n   */\n  private readonly destroyRef = inject(DestroyRef);\n\n  /**\n   * Emit when the element is resized.\n   */\n  @Output('ngpResize') readonly didResize = new EventEmitter<ResizeEvent>();\n\n  ngOnInit(): void {\n    // oberve the element for resize events (outside of Zone.js)\n    this.ngZone.runOutsideAngular(() =>\n      fromResizeEvent(this.element.nativeElement)\n        .pipe(takeUntilDestroyed(this.destroyRef))\n        .subscribe(event => this.didResize.emit(event)),\n    );\n  }\n}\n",
            "selector": "[ngpResize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "ngpResize",
                    "defaultValue": "new EventEmitter<ResizeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmit when the element is resized.\n",
                    "description": "<p>Emit when the element is resized.</p>\n",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroyRef",
                    "defaultValue": "inject(DestroyRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the destroy ref</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nAccess the destroy ref\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "element",
                    "defaultValue": "inject<ElementRef<HTMLElement>>(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the element.</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nAccess the element.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "ngZone",
                    "defaultValue": "inject(NgZone)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access NgZone.</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nAccess NgZone.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "NgpRovingFocusGroupDirective",
            "id": "directive-NgpRovingFocusGroupDirective-60086aed7ac1df8afcf1194aa0a900b854730bd7644aff92daa93fe167b08ad7c813d257535b396fbce3dd38a2d73ec8732398a63a663a89e0d7c14ba6d4a998",
            "file": "packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n  DestroyRef,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  SimpleChanges,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { filter } from 'rxjs';\nimport type { NgpRovingFocusItemDirective } from '../roving-focus-item/roving-focus-item.directive';\nimport { NgpRovingFocusGroupToken } from './roving-focus-group.token';\n\n@Directive({\n  selector: '[ngpRovingFocusGroup]',\n  standalone: true,\n  providers: [{ provide: NgpRovingFocusGroupToken, useExisting: NgpRovingFocusGroupDirective }],\n})\nexport class NgpRovingFocusGroupDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * Access the directionality service.\n   */\n  private readonly directionality = inject(Directionality);\n\n  /**\n   * Access the destroyRef\n   */\n  private readonly destroyRef = inject(DestroyRef);\n\n  /**\n   * Create a query list of all the roving focus items.\n   * We don't use ContentChildren as dynamically added items may not be in the correct order.\n   */\n  private readonly items = new QueryList<NgpRovingFocusItemDirective>();\n\n  /**\n   * Create the focus key manager instance.\n   * @internal\n   */\n  readonly keyManager = new FocusKeyManager<NgpRovingFocusItemDirective>(this.items);\n\n  /**\n   * Determine the orientation of the roving focus group.\n   * @default vertical\n   */\n  @Input({ alias: 'ngpRovingFocusGroupOrientation' }) orientation: 'horizontal' | 'vertical' =\n    'vertical';\n\n  /**\n   * Determine if focus should wrap when the end or beginning is reached.\n   * @default true\n   */\n  @Input({ alias: 'ngpRovingFocusGroupWrap', transform: booleanAttribute }) wrap: boolean = true;\n\n  ngOnInit(): void {\n    this.keyManager.withWrap(this.wrap);\n\n    // update the key manager orientation\n    this.setOrientation(this.orientation);\n\n    // update the key manager orientation if the document direction changes\n    this.directionality.change\n      .pipe(\n        filter(() => this.orientation === 'horizontal'),\n        takeUntilDestroyed(this.destroyRef),\n      )\n      .subscribe(direction => this.keyManager.withHorizontalOrientation(direction));\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // update the key manager orientation\n    if ('orientation' in changes) {\n      this.setOrientation(this.orientation);\n    }\n\n    // update the key manager wrap\n    if ('wrap' in changes) {\n      this.keyManager.withWrap(this.wrap);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.keyManager.destroy();\n  }\n\n  /**\n   * Register a the roving focus item.\n   * @param item The roving focus item to register.\n   */\n  register(item: NgpRovingFocusItemDirective): void {\n    // add the item to the query list by sort the items based on their order\n    this.items.reset([...this.items.toArray(), item].sort((a, b) => a.order - b.order));\n\n    // if this is the first item, make it the active item\n    if (this.items.length === 1) {\n      this.keyManager.updateActiveItem(item);\n    }\n  }\n\n  /**\n   * Unregister a the roving focus item.\n   * @param item The roving focus item to unregister.\n   */\n  unregister(item: NgpRovingFocusItemDirective): void {\n    // determine if the item being removed is the active item\n    const isActive = this.keyManager.activeItem === item;\n\n    // remove the item from the query list\n    this.items.reset(this.items.toArray().filter(i => i !== item));\n\n    // if the item being removed is the active item, make the first item the active item\n    if (isActive) {\n      this.keyManager.updateActiveItem(0);\n    }\n  }\n\n  /**\n   * Handle key events on the roving focus items.\n   * @param event The key event.\n   * @internal\n   */\n  onKeydown(event: KeyboardEvent): void {\n    this.keyManager.onKeydown(event);\n  }\n\n  /**\n   * Set the orientation of the roving focus group.\n   * @param orientation The orientation of the roving focus group.\n   */\n  setOrientation(orientation: 'horizontal' | 'vertical'): void {\n    this.orientation = orientation;\n\n    if (orientation === 'horizontal') {\n      this.keyManager.withHorizontalOrientation(this.directionality.value);\n    } else {\n      this.keyManager.withVerticalOrientation();\n    }\n  }\n}\n",
            "selector": "[ngpRovingFocusGroup]",
            "providers": [
                {
                    "name": "{ provide: NgpRovingFocusGroupToken, useExisting: NgpRovingFocusGroupDirective }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpRovingFocusGroupOrientation",
                    "defaultValue": "'vertical'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1461,
                            "end": 1482,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1462,
                                "end": 1469,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>vertical</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDetermine the orientation of the roving focus group.\n",
                    "description": "<p>Determine the orientation of the roving focus group.</p>\n",
                    "line": 52,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpRovingFocusGroupWrap",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1682,
                            "end": 1699,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1683,
                                "end": 1690,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDetermine if focus should wrap when the end or beginning is reached.\n",
                    "description": "<p>Determine if focus should wrap when the end or beginning is reached.</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroyRef",
                    "defaultValue": "inject(DestroyRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the destroyRef</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nAccess the destroyRef\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "directionality",
                    "defaultValue": "inject(Directionality)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the directionality service.</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nAccess the directionality service.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "new QueryList<NgpRovingFocusItemDirective>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Create a query list of all the roving focus items.\nWe don&#39;t use ContentChildren as dynamically added items may not be in the correct order.</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nCreate a query list of all the roving focus items.\nWe don't use ContentChildren as dynamically added items may not be in the correct order.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "keyManager",
                    "defaultValue": "new FocusKeyManager<NgpRovingFocusItemDirective>(this.items)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Create the focus key manager instance.</p>\n",
                    "line": 46,
                    "rawdescription": "\n\nCreate the focus key manager instance.\n",
                    "modifierKind": [
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1289,
                            "end": 1302,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1290,
                                "end": 1298,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle key events on the roving focus items.\n",
                    "description": "<p>Handle key events on the roving focus items.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3725,
                                "end": 3730,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3719,
                                "end": 3724,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The key event.</p>\n"
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "item",
                            "type": "NgpRovingFocusItemDirective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister a the roving focus item.\n",
                    "description": "<p>Register a the roving focus item.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2681,
                                "end": 2685,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "NgpRovingFocusItemDirective",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2675,
                                "end": 2680,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The roving focus item to register.</p>\n"
                        }
                    ]
                },
                {
                    "name": "setOrientation",
                    "args": [
                        {
                            "name": "orientation",
                            "type": "\"horizontal\" | \"vertical\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the orientation of the roving focus group.\n",
                    "description": "<p>Set the orientation of the roving focus group.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3922,
                                "end": 3933,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "orientation"
                            },
                            "type": "\"horizontal\" | \"vertical\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3916,
                                "end": 3921,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The orientation of the roving focus group.</p>\n"
                        }
                    ]
                },
                {
                    "name": "unregister",
                    "args": [
                        {
                            "name": "item",
                            "type": "NgpRovingFocusItemDirective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnregister a the roving focus item.\n",
                    "description": "<p>Unregister a the roving focus item.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3157,
                                "end": 3161,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "NgpRovingFocusItemDirective",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3151,
                                "end": 3156,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The roving focus item to unregister.</p>\n"
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ]
        },
        {
            "name": "NgpRovingFocusItemDirective",
            "id": "directive-NgpRovingFocusItemDirective-1e6b7c0f3d56e8e9c7b24e563c8d8a50327b01a8cc027c5d30f024ecf6cddcd05b2b98ef1c6ef31da1af49c44466fab10b685a96b3e4345cdfaee1668e5e3a01",
            "file": "packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { FocusableOption } from '@angular/cdk/a11y';\nimport {\n  ChangeDetectorRef,\n  DestroyRef,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  booleanAttribute,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { injectRovingFocusGroup } from '../roving-focus-group/roving-focus-group.token';\nimport { NgpRovingFocusItemToken } from './roving-focus-item.token';\n\n@Directive({\n  selector: '[ngpRovingFocusItem]',\n  standalone: true,\n  providers: [{ provide: NgpRovingFocusItemToken, useExisting: NgpRovingFocusItemDirective }],\n})\nexport class NgpRovingFocusItemDirective implements OnInit, OnDestroy, FocusableOption {\n  /**\n   * Access the group the roving focus item belongs to.\n   */\n  private readonly group = injectRovingFocusGroup();\n\n  /**\n   * Access the element reference of the roving focus item.\n   */\n  private readonly elementRef = inject(ElementRef<HTMLElement>);\n\n  /**\n   * Access the destroyRef\n   */\n  private readonly destroyRef = inject(DestroyRef);\n\n  /**\n   * Access the change detector ref\n   */\n  private readonly changeDetectorRef = inject(ChangeDetectorRef);\n\n  /**\n   * Define the order of the roving focus item in the group.\n   */\n  @Input({ alias: 'ngpRovingFocusItemOrder', transform: numberAttribute }) order: number = 0;\n\n  /**\n   * Define if the item is disabled.\n   */\n  @Input({ alias: 'ngpRovingFocusItemDisabled', transform: booleanAttribute }) disabled: boolean =\n    false;\n\n  /**\n   * Derive the tabindex of the roving focus item.\n   * @internal\n   */\n  @HostBinding('attr.tabindex')\n  get tabindex(): number {\n    return this.group.keyManager.activeItem === this ? 0 : -1;\n  }\n\n  ngOnInit(): void {\n    // register the roving focus item with the group\n    this.group.register(this);\n\n    // listen for changes to the active item and run change detection\n    this.group.keyManager.change\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe(() => this.changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy(): void {\n    // unregister the roving focus item with the group\n    this.group.unregister(this);\n  }\n\n  /**\n   * Handle key events on the roving focus item.\n   * @param event The key event.\n   * @internal\n   */\n  @HostListener('keydown', ['$event'])\n  onKeydown(event: KeyboardEvent): void {\n    this.group.onKeydown(event);\n  }\n\n  /**\n   * Focus the roving focus item.\n   * @param origin The origin of the focus request.\n   * @internal\n   */\n  focus(): void {\n    this.elementRef?.nativeElement.focus();\n  }\n}\n",
            "selector": "[ngpRovingFocusItem]",
            "providers": [
                {
                    "name": "{ provide: NgpRovingFocusItemToken, useExisting: NgpRovingFocusItemDirective }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpRovingFocusItemDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine if the item is disabled.\n",
                    "description": "<p>Define if the item is disabled.</p>\n",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpRovingFocusItemOrder",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the order of the roving focus item in the group.\n",
                    "description": "<p>Define the order of the roving focus item in the group.</p>\n",
                    "line": 49,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.tabindex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1597,
                            "end": 1610,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1598,
                                "end": 1606,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nDerive the tabindex of the roving focus item.\n",
                    "description": "<p>Derive the tabindex of the roving focus item.</p>\n",
                    "line": 62,
                    "type": "number",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle key events on the roving focus item.\n",
                    "description": "<p>Handle key events on the roving focus item.</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 2243,
                            "end": 2276,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 344,
                            "tagName": {
                                "pos": 2244,
                                "end": 2249,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The key event.</p>\n",
                            "name": {
                                "pos": 2250,
                                "end": 2255,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 2276,
                            "end": 2289,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 2277,
                                "end": 2285,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ],
                    "line": 87
                }
            ],
            "propertiesClass": [
                {
                    "name": "changeDetectorRef",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the change detector ref</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nAccess the change detector ref\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "destroyRef",
                    "defaultValue": "inject(DestroyRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the destroyRef</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nAccess the destroyRef\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "elementRef",
                    "defaultValue": "inject(ElementRef<HTMLElement>)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the element reference of the roving focus item.</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nAccess the element reference of the roving focus item.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "group",
                    "defaultValue": "injectRovingFocusGroup()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the group the roving focus item belongs to.</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nAccess the group the roving focus item belongs to.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFocus the roving focus item.\n",
                    "description": "<p>Focus the roving focus item.</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "onKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle key events on the roving focus item.\n",
                    "description": "<p>Handle key events on the roving focus item.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2250,
                                "end": 2255,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2244,
                                "end": 2249,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The key event.</p>\n"
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy",
                "FocusableOption"
            ],
            "accessors": {
                "tabindex": {
                    "name": "tabindex",
                    "getSignature": {
                        "name": "tabindex",
                        "type": "number",
                        "returnType": "number",
                        "line": 62,
                        "rawdescription": "\n\nDerive the tabindex of the roving focus item.\n",
                        "description": "<p>Derive the tabindex of the roving focus item.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 1597,
                                "end": 1610,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 330,
                                "tagName": {
                                    "pos": 1598,
                                    "end": 1606,
                                    "flags": 8421376,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "internal"
                                },
                                "comment": ""
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "NgpSeparatorDirective",
            "id": "directive-NgpSeparatorDirective-8cad1a1f2c2d08b8e7ff22c459a2331ab0a77cabefe15197bc4b954d0a12ceddba2af4158dedc50c82db09d146caccd83f7c3be0515bfd96b138875f8e611569",
            "file": "packages/ng-primitives/separator/src/separator/separator.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, booleanAttribute } from '@angular/core';\n\n@Directive({\n  selector: '[ngpSeparator]',\n  standalone: true,\n  host: {\n    '[attr.role]': 'decorative ? \"none\" : \"separator\"',\n    '[attr.aria-orientation]': '!decorative && orientation === \"vertical\" ? \"vertical\" : null',\n    '[attr.data-orientation]': 'orientation',\n  },\n})\nexport class NgpSeparatorDirective {\n  /**\n   * The orientation of the separator.\n   * @default 'horizontal'\n   */\n  @Input('ngpSeparatorOrientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether the separator is for decoration purposes. If true, the separator will not be included in the accessibility tree.\n   * @default false\n   */\n  @Input({ alias: 'ngpSeparatorDecorative', transform: booleanAttribute }) decorative: boolean =\n    false;\n}\n",
            "selector": "[ngpSeparator]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpSeparatorDecorative",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 692,
                            "end": 710,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 693,
                                "end": 700,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhether the separator is for decoration purposes. If true, the separator will not be included in the accessibility tree.\n",
                    "description": "<p>Whether the separator is for decoration purposes. If true, the separator will not be included in the accessibility tree.</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "ngpSeparatorOrientation",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 435,
                            "end": 460,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 436,
                                "end": 443,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;horizontal&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe orientation of the separator.\n",
                    "description": "<p>The orientation of the separator.</p>\n",
                    "line": 17,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "NgpSwitchDirective",
            "id": "directive-NgpSwitchDirective-b1f94630ce12c4dc81442d7a79bafe72b995e7e5319c0796f32224ee3f405df464a523782d891f4679f97ea907789047f41fe2544d37e328982201289e76092f",
            "file": "packages/ng-primitives/switch/src/switch/switch.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgpSwitchToken } from './switch.token';\n\n@Directive({\n  selector: '[ngpSwitch]',\n  standalone: true,\n  providers: [\n    { provide: NgpSwitchToken, useExisting: NgpSwitchDirective },\n    { provide: NG_VALUE_ACCESSOR, useExisting: NgpSwitchDirective, multi: true },\n  ],\n  host: {\n    role: 'switch',\n    '[attr.type]': 'isButton ? \"button\" : null',\n    '[attr.aria-checked]': 'checked',\n    '[attr.data-state]': 'checked ? \"checked\" : \"unchecked\"',\n    '[attr.data-disabled]': 'disabled ? \"true\" : null',\n    '[attr.disabled]': 'isButton && disabled ? disabled : null',\n    '(focus)': 'onTouched?.()',\n  },\n})\nexport class NgpSwitchDirective implements ControlValueAccessor {\n  /**\n   * Access the element ref.\n   */\n  private readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /**\n   * Determine if the switch is a button\n   */\n  protected isButton = this.elementRef.nativeElement.tagName === 'BUTTON';\n\n  /**\n   * Determine if the switch is checked.\n   * @default false\n   */\n  @Input({ alias: 'ngpSwitchChecked', transform: booleanAttribute }) checked: boolean = false;\n\n  /**\n   * Determine if the switch is disabled.\n   * @default false\n   */\n  @Input({ alias: 'ngpSwitchDisabled', transform: booleanAttribute }) disabled: boolean = false;\n\n  /**\n   * Event emitted when the checked state changes.\n   */\n  @Output('ngpSwitchCheckedChange') readonly checkedChange = new EventEmitter<boolean>();\n\n  /**\n   * Store the onChange callback.\n   */\n  private onChange?: (checked: boolean) => void;\n\n  /**\n   * Store the onTouched callback.\n   */\n  protected onTouched?: () => void;\n\n  /**\n   * Register the onChange callback.\n   * @param fn The onChange callback.\n   * @internal\n   */\n  registerOnChange(fn: (checked: boolean) => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Register the onTouched callback.\n   * @param fn The onTouched callback.\n   * @internal\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Write the value to the checked state.\n   * @param checked The checked state.\n   * @internal\n   */\n  writeValue(checked: boolean): void {\n    this.checked = checked;\n  }\n\n  /**\n   * Set the disabled state.\n   * @param isDisabled The disabled state.\n   * @internal\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * Toggle the checked state.\n   */\n  @HostListener('click')\n  toggle(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    this.checked = !this.checked;\n    this.checkedChange.emit(this.checked);\n    this.onChange?.(this.checked);\n  }\n\n  /**\n   * Handle the keydown event.\n   */\n  @HostListener('keydown.space')\n  protected onKeyDown(): void {\n    // If the switch is not a button then the space key will not toggle the checked state automatically,\n    // so we need to do it manually.\n    if (!this.isButton) {\n      this.toggle();\n    }\n  }\n}\n",
            "selector": "[ngpSwitch]",
            "providers": [
                {
                    "name": "{ provide: NgpSwitchToken, useExisting: NgpSwitchDirective }",
                    "type": "directive"
                },
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: NgpSwitchDirective, multi: true }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpSwitchChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1199,
                            "end": 1217,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1200,
                                "end": 1207,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDetermine if the switch is checked.\n",
                    "description": "<p>Determine if the switch is checked.</p>\n",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpSwitchDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1369,
                            "end": 1387,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1370,
                                "end": 1377,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDetermine if the switch is disabled.\n",
                    "description": "<p>Determine if the switch is disabled.</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "ngpSwitchCheckedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when the checked state changes.\n",
                    "description": "<p>Event emitted when the checked state changes.</p>\n",
                    "line": 57,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle the checked state.\n",
                    "description": "<p>Toggle the checked state.</p>\n",
                    "line": 109
                },
                {
                    "name": "keydown.space",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle the keydown event.\n",
                    "description": "<p>Handle the keydown event.</p>\n",
                    "line": 123
                }
            ],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "defaultValue": "inject<ElementRef<HTMLElement>>(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the element ref.</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nAccess the element ref.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "isButton",
                    "defaultValue": "this.elementRef.nativeElement.tagName === 'BUTTON'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Determine if the switch is a button</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nDetermine if the switch is a button\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Store the onChange callback.</p>\n",
                    "line": 62,
                    "rawdescription": "\n\nStore the onChange callback.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Store the onTouched callback.</p>\n",
                    "line": 67,
                    "rawdescription": "\n\nStore the onTouched callback.\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onKeyDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle the keydown event.\n",
                    "description": "<p>Handle the keydown event.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown.space'"
                        }
                    ],
                    "modifierKind": [
                        167,
                        122
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "checked",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister the onChange callback.\n",
                    "description": "<p>Register the onChange callback.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1877,
                                "end": 1879,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "checked",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 1871,
                                "end": 1876,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The onChange callback.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister the onTouched callback.\n",
                    "description": "<p>Register the onTouched callback.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2068,
                                "end": 2070,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 2062,
                                "end": 2067,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The onTouched callback.</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state.\n",
                    "description": "<p>Set the disabled state.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2418,
                                "end": 2428,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2412,
                                "end": 2417,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The disabled state.</p>\n"
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle the checked state.\n",
                    "description": "<p>Toggle the checked state.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrite the value to the checked state.\n",
                    "description": "<p>Write the value to the checked state.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2251,
                                "end": 2258,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "checked"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2245,
                                "end": 2250,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The checked state.</p>\n"
                        }
                    ]
                }
            ],
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "NgpSwitchThumbDirective",
            "id": "directive-NgpSwitchThumbDirective-4b34568d6e24f4f0ef52071d2e2dc5b6ce1974b5659733400e125a5156b02a9fb2536d7d7c603c6462ddf678fdcc2fca258d31d8a9ec050a15880f2bee826a59",
            "file": "packages/ng-primitives/switch/src/switch-thumb/switch-thumb.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\nimport { injectSwitch } from '../switch/switch.token';\n\n@Directive({\n  selector: '[ngpSwitchThumb]',\n  standalone: true,\n  host: {\n    '[attr.data-state]': 'switch.checked ? \"checked\" : \"unchecked\"',\n    '[attr.data-disabled]': 'switch.disabled ? \"true\" : null',\n  },\n})\nexport class NgpSwitchThumbDirective {\n  /**\n   * Access the switch directive.\n   */\n  protected readonly switch = injectSwitch();\n}\n",
            "selector": "[ngpSwitchThumb]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "switch",
                    "defaultValue": "injectSwitch()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the switch directive.</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nAccess the switch directive.\n",
                    "modifierKind": [
                        122,
                        146
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "NgpTabButtonDirective",
            "id": "directive-NgpTabButtonDirective-0b759ce2bc9945141c2ba66cb36c573bda46d625e7131971783bf72d1e3890e3315e05ff8f45bd63b6961784219c13a785c07c8c88cb349fea1abab3800d2cdc",
            "file": "packages/ng-primitives/tabs/src/tab-button/tab-button.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, Input, booleanAttribute } from '@angular/core';\nimport { NgpRovingFocusItemDirective } from '@ng-primitives/ng-primitives/roving-focus';\nimport { injectTabset } from '../tabset/tabset.token';\n\n@Directive({\n  selector: '[ngpTabButton]',\n  standalone: true,\n  host: {\n    role: 'tab',\n    '[attr.id]': 'id',\n    '[attr.aria-controls]': 'ariaControls',\n    '[attr.data-state]': 'active ? \"active\" : \"inactive\"',\n    '[attr.data-disabled]': 'disabled',\n    '[attr.data-orientation]': 'tabset.orientation',\n  },\n  hostDirectives: [\n    { directive: NgpRovingFocusItemDirective, inputs: ['ngpRovingFocusItemDisabled: disabled'] },\n  ],\n})\nexport class NgpTabButtonDirective {\n  /**\n   * Access the tabset\n   */\n  protected readonly tabset = injectTabset();\n\n  /**\n   * The value of the tab this trigger controls\n   */\n  @Input({ alias: 'ngpTabButtonValue', required: true }) value!: string;\n\n  /**\n   * Whether the tab is disabled\n   * @default false\n   */\n  @Input({ alias: 'ngpTabButtonDisabled', transform: booleanAttribute }) disabled = false;\n\n  /**\n   * Determine the id of the tab button\n   * @internal\n   */\n  protected readonly id = `${this.tabset.id}-button-${this.value}`;\n\n  /**\n   * Determine the aria-controls of the tab button\n   * @internal\n   */\n  protected readonly ariaControls = `${this.tabset.id}-panel-${this.value}`;\n\n  /**\n   * Whether the tab is active\n   */\n  protected get active(): boolean {\n    return this.tabset.value === this.value;\n  }\n\n  /**\n   * Select the tab this trigger controls\n   */\n  @HostListener('click')\n  select(): void {\n    this.tabset.select(this.value);\n  }\n\n  /**\n   * On focus select the tab this trigger controls if activateOnFocus is true\n   */\n  @HostListener('focus')\n  onFocus(): void {\n    if (this.tabset.activateOnFocus) {\n      this.select();\n    }\n  }\n}\n",
            "selector": "[ngpTabButton]",
            "providers": [],
            "hostDirectives": [
                {
                    "name": "NgpRovingFocusItemDirective",
                    "inputs": [
                        "ngpRovingFocusItemDisabled: disabled"
                    ],
                    "outputs": []
                }
            ],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpTabButtonDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 964,
                            "end": 982,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 965,
                                "end": 972,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhether the tab is disabled\n",
                    "description": "<p>Whether the tab is disabled</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "ngpTabButtonValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nThe value of the tab this trigger controls\n",
                    "description": "<p>The value of the tab this trigger controls</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect the tab this trigger controls\n",
                    "description": "<p>Select the tab this trigger controls</p>\n",
                    "line": 60
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn focus select the tab this trigger controls if activateOnFocus is true\n",
                    "description": "<p>On focus select the tab this trigger controls if activateOnFocus is true</p>\n",
                    "line": 68
                }
            ],
            "propertiesClass": [
                {
                    "name": "ariaControls",
                    "defaultValue": "`${this.tabset.id}-panel-${this.value}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Determine the aria-controls of the tab button</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nDetermine the aria-controls of the tab button\n",
                    "modifierKind": [
                        122,
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1275,
                            "end": 1288,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1276,
                                "end": 1284,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`${this.tabset.id}-button-${this.value}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Determine the id of the tab button</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nDetermine the id of the tab button\n",
                    "modifierKind": [
                        122,
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1128,
                            "end": 1141,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1129,
                                "end": 1137,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "tabset",
                    "defaultValue": "injectTabset()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the tabset</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nAccess the tabset\n",
                    "modifierKind": [
                        122,
                        146
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn focus select the tab this trigger controls if activateOnFocus is true\n",
                    "description": "<p>On focus select the tab this trigger controls if activateOnFocus is true</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "select",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect the tab this trigger controls\n",
                    "description": "<p>Select the tab this trigger controls</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "accessors": {
                "active": {
                    "name": "active",
                    "getSignature": {
                        "name": "active",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 52,
                        "rawdescription": "\n\nWhether the tab is active\n",
                        "description": "<p>Whether the tab is active</p>\n"
                    }
                }
            }
        },
        {
            "name": "NgpTabListDirective",
            "id": "directive-NgpTabListDirective-7bcfe5818123a7821bce607646ebd21cbb5fd1c805b11b146b454a11c2695c986bf147c4b3755e31277ff7a69ba52d669cf0915cc00a7992c2c336befce65dc5",
            "file": "packages/ng-primitives/tabs/src/tab-list/tab-list.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnInit, booleanAttribute } from '@angular/core';\nimport {\n  NgpRovingFocusGroupDirective,\n  injectRovingFocusGroup,\n} from '@ng-primitives/ng-primitives/roving-focus';\nimport { injectTabsetConfig } from '../config/tabset.config';\nimport { injectTabset } from '../tabset/tabset.token';\n\n@Directive({\n  selector: '[ngpTabList]',\n  standalone: true,\n  host: {\n    role: 'tablist',\n    '[attr.aria-orientation]': 'tabset.orientation',\n    '[attr.data-orientation]': 'tabset.orientation',\n  },\n  hostDirectives: [\n    {\n      directive: NgpRovingFocusGroupDirective,\n      inputs: ['ngpRovingFocusGroupWrap: wrap'],\n    },\n  ],\n})\nexport class NgpTabListDirective implements OnInit {\n  /**\n   * Access the global tab configuration\n   */\n  private readonly config = injectTabsetConfig();\n\n  /**\n   * Access the tabset\n   */\n  protected readonly tabset = injectTabset();\n\n  /**\n   * Access the roving focus group directive\n   */\n  private readonly rovingFocus = injectRovingFocusGroup();\n\n  /**\n   * Whether focus should wrap within the tab list when using the keyboard.\n   * @default true\n   */\n  @Input({ alias: 'ngpTabListWrap', transform: booleanAttribute }) wrap = this.config.wrap;\n\n  ngOnInit(): void {\n    this.rovingFocus.setOrientation(this.tabset.orientation);\n  }\n}\n",
            "selector": "[ngpTabList]",
            "providers": [],
            "hostDirectives": [
                {
                    "name": "NgpRovingFocusGroupDirective",
                    "inputs": [
                        "ngpRovingFocusGroupWrap: wrap"
                    ],
                    "outputs": []
                }
            ],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpTabListWrap",
                    "defaultValue": "this.config.wrap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1096,
                            "end": 1113,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1097,
                                "end": 1104,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhether focus should wrap within the tab list when using the keyboard.\n",
                    "description": "<p>Whether focus should wrap within the tab list when using the keyboard.</p>\n",
                    "line": 44,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "injectTabsetConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the global tab configuration</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nAccess the global tab configuration\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "rovingFocus",
                    "defaultValue": "injectRovingFocusGroup()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the roving focus group directive</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nAccess the roving focus group directive\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "tabset",
                    "defaultValue": "injectTabset()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the tabset</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nAccess the tabset\n",
                    "modifierKind": [
                        122,
                        146
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "NgpTabPanelDirective",
            "id": "directive-NgpTabPanelDirective-50228db6232858355a1e02ee378e1f56927938067fe0bcdc5a00b62f45364b28865eb8f9a1fa93ff5f770db98a78916cadccbbce531e362f56be8a60d36cc690",
            "file": "packages/ng-primitives/tabs/src/tab-panel/tab-panel.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input } from '@angular/core';\nimport { injectTabset } from '../tabset/tabset.token';\n\n@Directive({\n  selector: '[ngpTabPanel]',\n  standalone: true,\n  host: {\n    role: 'tabpanel',\n    tabIndex: '0',\n    '[attr.id]': 'id',\n    '[attr.aria-labelledby]': 'labelledBy',\n    '[attr.data-state]': 'active ? \"active\" : \"inactive\"',\n    '[attr.data-orientation]': 'tabset.orientation',\n    '[hidden]': '!active',\n  },\n})\nexport class NgpTabPanelDirective {\n  /**\n   * Access the tabset\n   */\n  protected readonly tabset = injectTabset();\n\n  /**\n   * The value of the tab\n   */\n  @Input({ alias: 'ngpTabPanelValue', required: true }) value!: string;\n\n  /**\n   * Determine the id of the tab panel\n   * @internal\n   */\n  protected readonly id = `${this.tabset.id}-panel-${this.value}`;\n\n  /**\n   * Determine the aria-labelledby of the tab panel\n   * @internal\n   */\n  protected readonly labelledBy = `${this.tabset.id}-button-${this.value}`;\n\n  /**\n   * Whether the tab is active\n   */\n  protected get active(): boolean {\n    return this.tabset.value === this.value;\n  }\n}\n",
            "selector": "[ngpTabPanel]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": true,
                    "name": "ngpTabPanelValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nThe value of the tab\n",
                    "description": "<p>The value of the tab</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "`${this.tabset.id}-panel-${this.value}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Determine the id of the tab panel</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nDetermine the id of the tab panel\n",
                    "modifierKind": [
                        122,
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 712,
                            "end": 725,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 713,
                                "end": 721,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "labelledBy",
                    "defaultValue": "`${this.tabset.id}-button-${this.value}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Determine the aria-labelledby of the tab panel</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nDetermine the aria-labelledby of the tab panel\n",
                    "modifierKind": [
                        122,
                        146
                    ],
                    "jsdoctags": [
                        {
                            "pos": 859,
                            "end": 872,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 860,
                                "end": 868,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "tabset",
                    "defaultValue": "injectTabset()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the tabset</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nAccess the tabset\n",
                    "modifierKind": [
                        122,
                        146
                    ]
                }
            ],
            "methodsClass": [],
            "accessors": {
                "active": {
                    "name": "active",
                    "getSignature": {
                        "name": "active",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 43,
                        "rawdescription": "\n\nWhether the tab is active\n",
                        "description": "<p>Whether the tab is active</p>\n"
                    }
                }
            }
        },
        {
            "name": "NgpTabsetDirective",
            "id": "directive-NgpTabsetDirective-2eab8f30e35afb503c0d8a8b2dd078fffc9c3fe947fe9a00b0f7091f4d999ecdb949bc129d8f0c2996998f5f2333d4c76cc50f91c09f3debca04284e3767ad0c",
            "file": "packages/ng-primitives/tabs/src/tabset/tabset.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  booleanAttribute,\n} from '@angular/core';\nimport { injectTabsetConfig } from '../config/tabset.config';\nimport { NgpTabPanelDirective } from '../tab-panel/tab-panel.directive';\nimport { NgpTabsetToken } from './tabset.token';\n\n/**\n * Define a unique id for the tabset\n */\nlet uniqueId = 0;\n\n@Directive({\n  selector: '[ngpTabset]',\n  standalone: true,\n  providers: [{ provide: NgpTabsetToken, useExisting: NgpTabsetDirective }],\n  host: {\n    '[attr.id]': 'id',\n    '[attr.data-orientation]': 'orientation',\n  },\n})\nexport class NgpTabsetDirective implements AfterContentInit {\n  /**\n   * Access the global tabset configuration\n   */\n  private readonly config = injectTabsetConfig();\n\n  /**\n   * Define the id for the tabset\n   */\n  @Input()\n  id: string = `ngp-tabset-${uniqueId++}`;\n\n  /**\n   * Define the active tab\n   */\n  @Input('ngpTabsetValue') value?: string;\n\n  /**\n   * The orientation of the tabset\n   * @default 'horizontal'\n   */\n  @Input('ngpTabsetOrientation')\n  orientation: 'horizontal' | 'vertical' = this.config.orientation;\n\n  /**\n   * Whether tabs should activate on focus\n   */\n  @Input({ alias: 'ngpTabsetActivateOnFocus', transform: booleanAttribute }) activateOnFocus =\n    this.config.activateOnFocus;\n\n  /**\n   * Event emitted when the active tab changes\n   */\n  @Output('ngpTabsetValueChange') readonly valueChange = new EventEmitter<string>();\n\n  /**\n   * Access the tabs within the tabset\n   * @internal\n   */\n  @ContentChildren(NgpTabPanelDirective, { descendants: true })\n  panels?: QueryList<NgpTabPanelDirective>;\n\n  ngAfterContentInit(): void {\n    // select the first tab if no value is set\n    if (!this.value && this.panels?.length) {\n      this.select(this.panels.first.value);\n    }\n  }\n\n  /**\n   * Select a tab by its value\n   * @param value The value of the tab to select\n   */\n  select(value: string): void {\n    this.value = value;\n    this.valueChange.emit(value);\n  }\n}\n",
            "selector": "[ngpTabset]",
            "providers": [
                {
                    "name": "{ provide: NgpTabsetToken, useExisting: NgpTabsetDirective }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "`ngp-tabset-${uniqueId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the id for the tabset\n",
                    "description": "<p>Define the id for the tabset</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpTabsetActivateOnFocus",
                    "defaultValue": "this.config.activateOnFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether tabs should activate on focus\n",
                    "description": "<p>Whether tabs should activate on focus</p>\n",
                    "line": 56,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "ngpTabsetOrientation",
                    "defaultValue": "this.config.orientation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1025,
                            "end": 1050,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1026,
                                "end": 1033,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;horizontal&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe orientation of the tabset\n",
                    "description": "<p>The orientation of the tabset</p>\n",
                    "line": 51,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "ngpTabsetValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the active tab\n",
                    "description": "<p>Define the active tab</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "ngpTabsetValueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when the active tab changes\n",
                    "description": "<p>Event emitted when the active tab changes</p>\n",
                    "line": 62,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "injectTabsetConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the global tabset configuration</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nAccess the global tabset configuration\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "panels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<NgpTabPanelDirective>",
                    "optional": true,
                    "description": "<p>Access the tabs within the tabset</p>\n",
                    "line": 69,
                    "rawdescription": "\n\nAccess the tabs within the tabset\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "NgpTabPanelDirective, {descendants: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1534,
                            "end": 1547,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1535,
                                "end": 1543,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect a tab by its value\n",
                    "description": "<p>Select a tab by its value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1887,
                                "end": 1892,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1881,
                                "end": 1886,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value of the tab to select</p>\n"
                        }
                    ]
                }
            ],
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "NgpToggleDirective",
            "id": "directive-NgpToggleDirective-630b2ae3e543218587cd26d4a48064a50688ff07a539ca131b08f71d879be553f1785620ec45e473ba22518032da76776aa50dd5aad76592fe41663f44134910",
            "file": "packages/ng-primitives/toggle/src/toggle/toggle.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  booleanAttribute,\n} from '@angular/core';\n\n@Directive({\n  selector: 'button[ngpToggle]',\n  standalone: true,\n  host: {\n    type: 'button',\n    '[attr.aria-pressed]': 'pressed',\n    '[attr.data-state]': 'pressed ? \"on\" : \"off\"',\n    '[attr.data-disabled]': 'disabled',\n  },\n})\nexport class NgpToggleDirective {\n  /**\n   * Whether the toggle is pressed.\n   * @default false\n   */\n  @Input({ alias: 'ngpTogglePressed', transform: booleanAttribute }) pressed: boolean = false;\n\n  /**\n   * Whether the toggle is disabled.\n   * @default false\n   */\n  @Input({ alias: 'ngpToggleDisabled', transform: booleanAttribute }) disabled: boolean = false;\n\n  /**\n   * Event emitted when the toggle is pressed.\n   */\n  @Output('ngpTogglePressedChange') readonly pressedChange = new EventEmitter<boolean>();\n\n  /**\n   * Toggle the pressed state.\n   */\n  @HostListener('click')\n  toggle(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    this.pressed = !this.pressed;\n    this.pressedChange.emit(this.pressed);\n  }\n}\n",
            "selector": "button[ngpToggle]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpToggleDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 597,
                            "end": 615,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 598,
                                "end": 605,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhether the toggle is disabled.\n",
                    "description": "<p>Whether the toggle is disabled.</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpTogglePressed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 432,
                            "end": 450,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 433,
                                "end": 440,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhether the toggle is pressed.\n",
                    "description": "<p>Whether the toggle is pressed.</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "ngpTogglePressedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when the toggle is pressed.\n",
                    "description": "<p>Event emitted when the toggle is pressed.</p>\n",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle the pressed state.\n",
                    "description": "<p>Toggle the pressed state.</p>\n",
                    "line": 42
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle the pressed state.\n",
                    "description": "<p>Toggle the pressed state.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ]
        },
        {
            "name": "NgpToggleGroupButtonDirective",
            "id": "directive-NgpToggleGroupButtonDirective-ae56cfe94a03b294aef04765bd63a4fcd937eb9673d8a3e5352402e6efade19d08aa96084937d3faf0774723176783b523b7ed649b280efa0bb9209eadc91727",
            "file": "packages/ng-primitives/toggle-group/src/toggle-group-button/toggle-group-button.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  HostListener,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  booleanAttribute,\n} from '@angular/core';\nimport {\n  NgpRovingFocusItemDirective,\n  injectRovingFocusItem,\n} from '@ng-primitives/ng-primitives/roving-focus';\nimport { injectToggleGroup } from '../toggle-group/toggle-group.token';\nimport { NgpToggleGroupButtonToken } from './toggle-group-button.token';\n\n@Directive({\n  selector: 'button[ngpToggleGroupButton]',\n  standalone: true,\n  hostDirectives: [NgpRovingFocusItemDirective],\n  providers: [{ provide: NgpToggleGroupButtonToken, useExisting: NgpToggleGroupButtonDirective }],\n  host: {\n    role: 'radio',\n    '[attr.aria-checked]': 'checked',\n    '[attr.aria-disabled]': 'disabled || toggleGroup.disabled',\n    '[attr.data-disabled]': 'disabled || toggleGroup.disabled',\n    '[attr.data-state]': 'checked ? \"on\" : \"off\"',\n    '[attr.data-orientation]': 'toggleGroup.orientation',\n  },\n})\nexport class NgpToggleGroupButtonDirective implements OnChanges {\n  /**\n   * Access the toggle group.\n   */\n  protected readonly toggleGroup = injectToggleGroup();\n\n  /**\n   * Access the roving focus item.\n   */\n  private readonly rovingFocusItem = injectRovingFocusItem();\n\n  /**\n   * The value of this toggle button.\n   */\n  @Input({ alias: 'ngpToggleGroupButtonValue', required: true }) value!: string;\n\n  /**\n   * Whether this toggle button is disabled.\n   * @default false\n   */\n  @Input({ alias: 'ngpToggleGroupButtonDisabled', transform: booleanAttribute }) disabled = false;\n\n  /**\n   * Whether this toggle button is checked.\n   */\n  protected get checked(): boolean {\n    return this.toggleGroup.isSelected(this.value);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('disabled' in changes) {\n      this.updateDisabled();\n    }\n  }\n\n  /**\n   * Toggle this toggle button.\n   */\n  @HostListener('click')\n  toggle(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    this.toggleGroup.toggle(this.value);\n  }\n\n  /**\n   * Ensure the disabled state is propagated to the roving focus item.\n   * @internal\n   */\n  updateDisabled(): void {\n    this.rovingFocusItem.disabled = this.disabled || this.toggleGroup.disabled;\n  }\n}\n",
            "selector": "button[ngpToggleGroupButton]",
            "providers": [
                {
                    "name": "{ provide: NgpToggleGroupButtonToken, useExisting: NgpToggleGroupButtonDirective }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [
                {
                    "name": "NgpRovingFocusItemDirective"
                }
            ],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpToggleGroupButtonDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1384,
                            "end": 1402,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1385,
                                "end": 1392,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhether this toggle button is disabled.\n",
                    "description": "<p>Whether this toggle button is disabled.</p>\n",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "ngpToggleGroupButtonValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nThe value of this toggle button.\n",
                    "description": "<p>The value of this toggle button.</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle this toggle button.\n",
                    "description": "<p>Toggle this toggle button.</p>\n",
                    "line": 69
                }
            ],
            "propertiesClass": [
                {
                    "name": "rovingFocusItem",
                    "defaultValue": "injectRovingFocusItem()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the roving focus item.</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nAccess the roving focus item.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "toggleGroup",
                    "defaultValue": "injectToggleGroup()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the toggle group.</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nAccess the toggle group.\n",
                    "modifierKind": [
                        122,
                        146
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle this toggle button.\n",
                    "description": "<p>Toggle this toggle button.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "updateDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnsure the disabled state is propagated to the roving focus item.\n",
                    "description": "<p>Ensure the disabled state is propagated to the roving focus item.</p>\n",
                    "jsdoctags": []
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "getSignature": {
                        "name": "checked",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 55,
                        "rawdescription": "\n\nWhether this toggle button is checked.\n",
                        "description": "<p>Whether this toggle button is checked.</p>\n"
                    }
                }
            }
        },
        {
            "name": "NgpToggleGroupDirective",
            "id": "directive-NgpToggleGroupDirective-39cd49d2e652176cabeb4fa1690f8a3f15e134fc94f0154a5ab1732f7f61ed3eaf93343dcc3b7cd8a25a99eb0bae69bee4186e1de2518858d912f926b1fc16ff",
            "file": "packages/ng-primitives/toggle-group/src/toggle-group/toggle-group.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  QueryList,\n  SimpleChanges,\n  booleanAttribute,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n  NgpRovingFocusGroupDirective,\n  injectRovingFocusGroup,\n} from '@ng-primitives/ng-primitives/roving-focus';\nimport type { NgpToggleGroupButtonDirective } from '../toggle-group-button/toggle-group-button.directive';\nimport { NgpToggleGroupButtonToken } from '../toggle-group-button/toggle-group-button.token';\nimport { NgpToggleGroupToken } from './toggle-group.token';\n\n@Directive({\n  selector: '[ngpToggleGroup]',\n  standalone: true,\n  hostDirectives: [\n    {\n      directive: NgpRovingFocusGroupDirective,\n      inputs: ['ngpRovingFocusGroupWrap:wrap', 'ngpRovingFocusGroupOrientation:orientation'],\n    },\n  ],\n  providers: [\n    { provide: NgpToggleGroupToken, useExisting: NgpToggleGroupDirective },\n    { provide: NG_VALUE_ACCESSOR, useExisting: NgpToggleGroupDirective, multi: true },\n  ],\n  host: {\n    role: 'group',\n    '[attr.data-orientation]': 'orientation',\n    '(focusout)': 'onTouched?.()',\n  },\n})\nexport class NgpToggleGroupDirective\n  implements OnInit, OnChanges, AfterContentInit, ControlValueAccessor\n{\n  /**\n   * Access the roving focus group\n   */\n  private readonly rovingFocusGroup = injectRovingFocusGroup();\n\n  /**\n   * The selected toggle button.\n   */\n  @Input('ngpToggleGroupValue') value: string | null = null;\n\n  /**\n   * The orientation of the toggle group.\n   * @default 'horizontal'\n   */\n  @Input('ngpToggleGroupOrientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether the toggle group is disabled.\n   * @default false\n   */\n  @Input({ alias: 'ngpToggleGroupDisabled', transform: booleanAttribute }) disabled = false;\n\n  /**\n   * Whether the toggle group roving focus should wrap.\n   * @default true\n   */\n  @Input({ alias: 'ngpToggleGroupWrap', transform: booleanAttribute }) wrap = true;\n\n  /**\n   * Event emitted when the selected toggle button changes.\n   */\n  @Input('ngpToggleGroupValueChange') readonly valueChange = new EventEmitter<string | null>();\n\n  /**\n   * Access the buttons in the toggle group.\n   */\n  @ContentChildren(NgpToggleGroupButtonToken)\n  protected buttons?: QueryList<NgpToggleGroupButtonDirective>;\n\n  /**\n   * The value change callback.\n   */\n  private onChange?: (value: string | null) => void;\n\n  /**\n   * The touched callback.\n   */\n  protected onTouched?: () => void;\n\n  ngOnInit(): void {\n    // the toggle button group has a default orientation of horizontal\n    // whereas the roving focus group has a default orientation of vertical\n    // if the toggle button group input is not defined, the orientation will not be set\n    // in the roving focus group and the default vertical orientation will be used.\n    // we must initially set the orientation of the roving focus group to match the toggle button group orientation\n    this.rovingFocusGroup.setOrientation(this.orientation);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('disabled' in changes) {\n      this.buttons?.forEach(button => button.updateDisabled());\n    }\n  }\n\n  ngAfterContentInit(): void {\n    if (this.disabled) {\n      this.buttons?.forEach(button => button.updateDisabled());\n    }\n  }\n\n  /**\n   * Determine if a value is selected.\n   * @param value The value to check.\n   * @returns Whether the value is selected.\n   * @internal\n   */\n  isSelected(value: string): boolean {\n    return this.value === value;\n  }\n\n  /**\n   * Toggle a value.\n   * @param value The value to toggle.\n   * @internal\n   */\n  toggle(value: string): void {\n    if (this.disabled) {\n      return;\n    }\n\n    this.value = this.value === value ? null : value;\n    this.valueChange.emit(this.value);\n    this.onChange?.(this.value);\n  }\n\n  /**\n   * Select a value from Angular forms.\n   * @param value The value to select.\n   * @internal\n   */\n  writeValue(value: string): void {\n    this.value = value;\n  }\n\n  /**\n   * Register a callback to be called when the value changes.\n   * @param fn The callback to register.\n   * @internal\n   */\n  registerOnChange(fn: (value: string | null) => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Register a callback to be called when the toggle group is touched.\n   * @param fn The callback to register.\n   * @internal\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Set the disabled state of the toggle group.\n   * @param isDisabled Whether the toggle group is disabled.\n   * @internal\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.buttons?.forEach(button => button.updateDisabled());\n  }\n}\n",
            "selector": "[ngpToggleGroup]",
            "providers": [
                {
                    "name": "{ provide: NgpToggleGroupToken, useExisting: NgpToggleGroupDirective }",
                    "type": "directive"
                },
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: NgpToggleGroupDirective, multi: true }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [
                {
                    "name": "NgpRovingFocusGroupDirective",
                    "inputs": [
                        "ngpRovingFocusGroupWrap:wrap",
                        "ngpRovingFocusGroupOrientation:orientation"
                    ],
                    "outputs": []
                }
            ],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpToggleGroupDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1741,
                            "end": 1759,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1742,
                                "end": 1749,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhether the toggle group is disabled.\n",
                    "description": "<p>Whether the toggle group is disabled.</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "ngpToggleGroupOrientation",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1565,
                            "end": 1590,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1566,
                                "end": 1573,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;horizontal&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe orientation of the toggle group.\n",
                    "description": "<p>The orientation of the toggle group.</p>\n",
                    "line": 58,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "ngpToggleGroupValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe selected toggle button.\n",
                    "description": "<p>The selected toggle button.</p>\n",
                    "line": 52,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "ngpToggleGroupValueChange",
                    "defaultValue": "new EventEmitter<string | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when the selected toggle button changes.\n",
                    "description": "<p>Event emitted when the selected toggle button changes.</p>\n",
                    "line": 75,
                    "type": "any",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpToggleGroupWrap",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1923,
                            "end": 1940,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1924,
                                "end": 1931,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhether the toggle group roving focus should wrap.\n",
                    "description": "<p>Whether the toggle group roving focus should wrap.</p>\n",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<NgpToggleGroupButtonDirective>",
                    "optional": true,
                    "description": "<p>Access the buttons in the toggle group.</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nAccess the buttons in the toggle group.\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "NgpToggleGroupButtonToken"
                        }
                    ],
                    "modifierKind": [
                        167,
                        122
                    ]
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>The value change callback.</p>\n",
                    "line": 86,
                    "rawdescription": "\n\nThe value change callback.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>The touched callback.</p>\n",
                    "line": 91,
                    "rawdescription": "\n\nThe touched callback.\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "rovingFocusGroup",
                    "defaultValue": "injectRovingFocusGroup()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the roving focus group</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nAccess the roving focus group\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine if a value is selected.\n",
                    "description": "<p>Determine if a value is selected.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3402,
                                "end": 3407,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3396,
                                "end": 3401,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value to check.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3434,
                                "end": 3441,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Whether the value is selected.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister a callback to be called when the value changes.\n",
                    "description": "<p>Register a callback to be called when the value changes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4118,
                                "end": 4120,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 4112,
                                "end": 4117,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The callback to register.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister a callback to be called when the toggle group is touched.\n",
                    "description": "<p>Register a callback to be called when the toggle group is touched.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4350,
                                "end": 4352,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 4344,
                                "end": 4349,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The callback to register.</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state of the toggle group.\n",
                    "description": "<p>Set the disabled state of the toggle group.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4541,
                                "end": 4551,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4535,
                                "end": 4540,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Whether the toggle group is disabled.</p>\n"
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle a value.\n",
                    "description": "<p>Toggle a value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3610,
                                "end": 3615,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3604,
                                "end": 3609,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value to toggle.</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect a value from Angular forms.\n",
                    "description": "<p>Select a value from Angular forms.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3925,
                                "end": 3930,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3919,
                                "end": 3924,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value to select.</p>\n"
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges",
                "AfterContentInit",
                "ControlValueAccessor"
            ]
        },
        {
            "name": "NgpToggleGroupMultiDirective",
            "id": "directive-NgpToggleGroupMultiDirective-01005d36557624c247222509126a549fe4074b413ddc4ca5ff9eaa4fd3304d14cfc7e64f3ddb529472b83928ea09bf4b7b0b088760a103636d735c30c7107630",
            "file": "packages/ng-primitives/toggle-group/src/toggle-group-multi/toggle-group-multi.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  QueryList,\n  SimpleChanges,\n  booleanAttribute,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n  NgpRovingFocusGroupDirective,\n  injectRovingFocusGroup,\n} from '@ng-primitives/ng-primitives/roving-focus';\nimport type { NgpToggleGroupButtonDirective } from '../toggle-group-button/toggle-group-button.directive';\nimport { NgpToggleGroupButtonToken } from '../toggle-group-button/toggle-group-button.token';\nimport { NgpToggleGroupToken } from '../toggle-group/toggle-group.token';\n\n@Directive({\n  selector: '[ngpToggleGroupMulti]',\n  standalone: true,\n  hostDirectives: [\n    {\n      directive: NgpRovingFocusGroupDirective,\n      inputs: ['ngpRovingFocusGroupWrap:wrap', 'ngpRovingFocusGroupOrientation:orientation'],\n    },\n  ],\n  providers: [\n    { provide: NgpToggleGroupToken, useExisting: NgpToggleGroupMultiDirective },\n    { provide: NG_VALUE_ACCESSOR, useExisting: NgpToggleGroupMultiDirective, multi: true },\n  ],\n  host: {\n    role: 'group',\n    '[attr.data-orientation]': 'orientation',\n    '(focusout)': 'onTouched?.()',\n  },\n})\nexport class NgpToggleGroupMultiDirective\n  implements OnInit, OnChanges, AfterContentInit, ControlValueAccessor\n{\n  /**\n   * Access the roving focus group\n   */\n  private readonly rovingFocusGroup = injectRovingFocusGroup();\n\n  /**\n   * The selected toggle button.\n   */\n  @Input('ngpToggleGroupMultiValue') value: ReadonlyArray<string> = [];\n\n  /**\n   * The orientation of the toggle group.\n   * @default 'horizontal'\n   */\n  @Input('ngpToggleGroupMultiOrientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether the toggle group is disabled.\n   * @default false\n   */\n  @Input({ alias: 'ngpToggleGroupMultiDisabled', transform: booleanAttribute }) disabled = false;\n\n  /**\n   * Whether the toggle group roving focus should wrap.\n   * @default true\n   */\n  @Input({ alias: 'ngpToggleGroupMultiWrap', transform: booleanAttribute }) wrap = true;\n\n  /**\n   * Event emitted when the selected toggle button changes.\n   */\n  @Input('ngpToggleGroupMultiValueChange') readonly valueChange = new EventEmitter<\n    ReadonlyArray<string>\n  >();\n\n  /**\n   * Access the buttons in the toggle group.\n   */\n  @ContentChildren(NgpToggleGroupButtonToken)\n  protected buttons?: QueryList<NgpToggleGroupButtonDirective>;\n\n  /**\n   * The value change callback.\n   */\n  private onChange?: (value: ReadonlyArray<string>) => void;\n\n  /**\n   * The touched callback.\n   */\n  protected onTouched?: () => void;\n\n  ngOnInit(): void {\n    // the toggle button group has a default orientation of horizontal\n    // whereas the roving focus group has a default orientation of vertical\n    // if the toggle button group input is not defined, the orientation will not be set\n    // in the roving focus group and the default vertical orientation will be used.\n    // we must initially set the orientation of the roving focus group to match the toggle button group orientation\n    this.rovingFocusGroup.setOrientation(this.orientation);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('disabled' in changes) {\n      this.buttons?.forEach(button => button.updateDisabled());\n    }\n  }\n\n  ngAfterContentInit(): void {\n    if (this.disabled) {\n      this.buttons?.forEach(button => button.updateDisabled());\n    }\n  }\n\n  /**\n   * Determine if a value is selected.\n   * @param value The value to check.\n   * @returns Whether the value is selected.\n   * @internal\n   */\n  isSelected(value: string): boolean {\n    return this.value.includes(value);\n  }\n\n  /**\n   * Toggle a value.\n   * @param value The value to toggle.\n   * @internal\n   */\n  toggle(value: string): void {\n    if (this.disabled) {\n      return;\n    }\n\n    this.value = this.value.includes(value)\n      ? this.value.filter(v => v !== value)\n      : [...this.value, value];\n\n    this.valueChange.emit(this.value);\n    this.onChange?.(this.value);\n  }\n\n  /**\n   * Select a value from Angular forms.\n   * @param value The value to select.\n   * @internal\n   */\n  writeValue(value: ReadonlyArray<string>): void {\n    this.value = value;\n  }\n\n  /**\n   * Register a callback to be called when the value changes.\n   * @param fn The callback to register.\n   * @internal\n   */\n  registerOnChange(fn: (value: ReadonlyArray<string>) => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Register a callback to be called when the toggle group is touched.\n   * @param fn The callback to register.\n   * @internal\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Set the disabled state of the toggle group.\n   * @param isDisabled Whether the toggle group is disabled.\n   * @internal\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.buttons?.forEach(button => button.updateDisabled());\n  }\n}\n",
            "selector": "[ngpToggleGroupMulti]",
            "providers": [
                {
                    "name": "{ provide: NgpToggleGroupToken, useExisting: NgpToggleGroupMultiDirective }",
                    "type": "directive"
                },
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: NgpToggleGroupMultiDirective, multi: true }",
                    "type": "directive"
                }
            ],
            "hostDirectives": [
                {
                    "name": "NgpRovingFocusGroupDirective",
                    "inputs": [
                        "ngpRovingFocusGroupWrap:wrap",
                        "ngpRovingFocusGroupOrientation:orientation"
                    ],
                    "outputs": []
                }
            ],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "ngpToggleGroupMultiDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1791,
                            "end": 1809,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1792,
                                "end": 1799,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhether the toggle group is disabled.\n",
                    "description": "<p>Whether the toggle group is disabled.</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "ngpToggleGroupMultiOrientation",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1610,
                            "end": 1635,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1611,
                                "end": 1618,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;horizontal&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe orientation of the toggle group.\n",
                    "description": "<p>The orientation of the toggle group.</p>\n",
                    "line": 58,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "ngpToggleGroupMultiValue",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe selected toggle button.\n",
                    "description": "<p>The selected toggle button.</p>\n",
                    "line": 52,
                    "type": "ReadonlyArray<string>",
                    "decorators": []
                },
                {
                    "name": "ngpToggleGroupMultiValueChange",
                    "defaultValue": "new EventEmitter<\n    ReadonlyArray<string>\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent emitted when the selected toggle button changes.\n",
                    "description": "<p>Event emitted when the selected toggle button changes.</p>\n",
                    "line": 75,
                    "type": "any",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpToggleGroupMultiWrap",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1978,
                            "end": 1995,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1979,
                                "end": 1986,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhether the toggle group roving focus should wrap.\n",
                    "description": "<p>Whether the toggle group roving focus should wrap.</p>\n",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<NgpToggleGroupButtonDirective>",
                    "optional": true,
                    "description": "<p>Access the buttons in the toggle group.</p>\n",
                    "line": 83,
                    "rawdescription": "\n\nAccess the buttons in the toggle group.\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "NgpToggleGroupButtonToken"
                        }
                    ],
                    "modifierKind": [
                        167,
                        122
                    ]
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>The value change callback.</p>\n",
                    "line": 88,
                    "rawdescription": "\n\nThe value change callback.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>The touched callback.</p>\n",
                    "line": 93,
                    "rawdescription": "\n\nThe touched callback.\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "rovingFocusGroup",
                    "defaultValue": "injectRovingFocusGroup()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the roving focus group</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nAccess the roving focus group\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine if a value is selected.\n",
                    "description": "<p>Determine if a value is selected.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3491,
                                "end": 3496,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3485,
                                "end": 3490,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value to check.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3523,
                                "end": 3530,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Whether the value is selected.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "ReadonlyArray<string>",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister a callback to be called when the value changes.\n",
                    "description": "<p>Register a callback to be called when the value changes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4295,
                                "end": 4297,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "ReadonlyArray<string>",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 4289,
                                "end": 4294,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The callback to register.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister a callback to be called when the toggle group is touched.\n",
                    "description": "<p>Register a callback to be called when the toggle group is touched.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4535,
                                "end": 4537,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 4529,
                                "end": 4534,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The callback to register.</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state of the toggle group.\n",
                    "description": "<p>Set the disabled state of the toggle group.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4726,
                                "end": 4736,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4720,
                                "end": 4725,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Whether the toggle group is disabled.</p>\n"
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle a value.\n",
                    "description": "<p>Toggle a value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3705,
                                "end": 3710,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3699,
                                "end": 3704,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value to toggle.</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "ReadonlyArray<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect a value from Angular forms.\n",
                    "description": "<p>Select a value from Angular forms.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4087,
                                "end": 4092,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "ReadonlyArray<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4081,
                                "end": 4086,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value to select.</p>\n"
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges",
                "AfterContentInit",
                "ControlValueAccessor"
            ]
        },
        {
            "name": "NgpTooltipArrowDirective",
            "id": "directive-NgpTooltipArrowDirective-c78b5e5a4238976172c2d89f7a6ef5684b68531dfd7552ade9f3fad04e1935c34ea58a094e989788a03689943262ebc16e7d5699510e879ca3e43d96e85a3abd",
            "file": "packages/ng-primitives/tooltip/src/tooltip-arrow/tooltip-arrow.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\nimport { NgpOverlayArrowDirective } from '@ng-primitives/ng-primitives/overlay';\n\n@Directive({\n  selector: '[ngpTooltipArrow]',\n  standalone: true,\n  hostDirectives: [NgpOverlayArrowDirective],\n})\nexport class NgpTooltipArrowDirective {}\n",
            "selector": "[ngpTooltipArrow]",
            "providers": [],
            "hostDirectives": [
                {
                    "name": "NgpOverlayArrowDirective"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "NgpTooltipDirective",
            "id": "directive-NgpTooltipDirective-f8a164555d9b7cb2337beae461ba3497ffef3dfb372103ab4abc6af3031ff2a33886d8615ec141b33c0809e8dc2c8aa493eabebeba1e9aae75c9fbd3b337fc19",
            "file": "packages/ng-primitives/tooltip/src/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { NgpOverlayDirective } from '@ng-primitives/ng-primitives/overlay';\nimport { injectTooltipTrigger } from '../tooltip-trigger/tooltip-trigger.token';\n\n/**\n * A unique identifier for the tooltip\n */\nlet uniqueId = 0;\n\n@Directive({\n  selector: '[ngpTooltip]',\n  standalone: true,\n  exportAs: 'ngpTooltip',\n  hostDirectives: [NgpOverlayDirective],\n  host: {\n    role: 'tooltip',\n  },\n})\nexport class NgpTooltipDirective implements OnInit, OnChanges {\n  /**\n   * Access the tooltip trigger\n   */\n  private readonly trigger = injectTooltipTrigger();\n\n  /**\n   * Define the tooltip id\n   */\n  @Input() id = `ngp-tooltip-${uniqueId++}`;\n\n  ngOnInit(): void {\n    this.trigger.setTooltipId(this.id);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('id' in changes) {\n      this.trigger.setTooltipId(this.id);\n    }\n  }\n}\n",
            "selector": "[ngpTooltip]",
            "providers": [],
            "exportAs": "ngpTooltip",
            "hostDirectives": [
                {
                    "name": "NgpOverlayDirective"
                }
            ],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "`ngp-tooltip-${uniqueId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the tooltip id\n",
                    "description": "<p>Define the tooltip id</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "trigger",
                    "defaultValue": "injectTooltipTrigger()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the tooltip trigger</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nAccess the tooltip trigger\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "NgpTooltipTriggerDirective",
            "id": "directive-NgpTooltipTriggerDirective-d2f081890730f6ce2d4c497cc1724c74447d292279feb1054e8950073fef3d7b61619397952bf31d0f5d70d30bfd20e5a1a9b6d9c70fb55842aa2b008ce7b500",
            "file": "packages/ng-primitives/tooltip/src/tooltip-trigger/tooltip-trigger.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  HostListener,\n  Input,\n  OnInit,\n  TemplateRef,\n  booleanAttribute,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport { Placement } from '@floating-ui/dom';\nimport { NgpOverlayTriggerDirective } from '@ng-primitives/ng-primitives/overlay';\nimport { injectTooltipConfig } from '../config/tooltip.config';\nimport { NgpTooltipTriggerToken } from './tooltip-trigger.token';\n\n@Directive({\n  selector: '[ngpTooltipTrigger]',\n  standalone: true,\n  host: {\n    '[attr.aria-describedby]': 'tooltipId',\n  },\n  hostDirectives: [\n    {\n      directive: NgpOverlayTriggerDirective,\n      inputs: [\n        'ngpOverlayTrigger: ngpTooltipTrigger',\n        'ngpOverlayDisabled: ngpTooltipDisabled',\n        'ngpOverlayPlacement: ngpTooltipPlacement',\n        'ngpOverlayOffset: ngpTooltipOffset',\n        'ngpOverlayShowDelay: ngpTooltipShowDelay',\n        'ngpOverlayHideDelay: ngpTooltipHideDelay',\n        'ngpOverlayShift: ngpTooltipShift',\n        'ngpOverlayFlip: ngpTooltipFlip',\n        'ngpOverlayContainer: ngpTooltipContainer',\n      ],\n    },\n  ],\n})\nexport class NgpTooltipTriggerDirective implements OnInit {\n  /**\n   * Access the overlay trigger directive\n   */\n  private readonly overlayTrigger = inject(NgpOverlayTriggerDirective);\n\n  /**\n   * Access the global tooltip configuration\n   */\n  private readonly tooltipConfig = injectTooltipConfig();\n\n  /**\n   * Define the tooltip to display when the trigger is activated.\n   */\n  @Input({ alias: 'ngpTooltipTrigger', required: true }) templateRef!: TemplateRef<void>;\n\n  /**\n   * Define if the trigger should be disabled.\n   * @default false\n   */\n  @Input({ alias: 'ngpTooltipDisabled', transform: booleanAttribute }) disabled: boolean = false;\n\n  /**\n   * Define the placement of the tooltip relative to the trigger.\n   * @default 'bottom'\n   */\n  @Input('ngpTooltipPlacement') placement: Placement = this.tooltipConfig.placement;\n\n  /**\n   * Define the offset of the tooltip relative to the trigger.\n   * @default 0\n   */\n  @Input({ alias: 'ngpTooltipOffset', transform: numberAttribute }) offset: number =\n    this.tooltipConfig.offset;\n\n  /**\n   * Define the delay before the tooltip is displayed.\n   * @default 0\n   */\n  @Input({ alias: 'ngpTooltipShowDelay', transform: numberAttribute }) showDelay: number =\n    this.tooltipConfig.showDelay;\n\n  /**\n   * Define the delay before the tooltip is hidden.\n   * @default 0\n   */\n  @Input({ alias: 'ngpTooltipHideDelay', transform: numberAttribute }) hideDelay: number =\n    this.tooltipConfig.hideDelay;\n\n  /**\n   * Define whether the tooltip should flip when there is not enough space for the tooltip.\n   * @default true\n   */\n  @Input({ alias: 'ngpTooltipFlip', transform: booleanAttribute }) flip: boolean =\n    this.tooltipConfig.flip;\n\n  /**\n   * Define the container in to which the tooltip should be attached.\n   * @default document.body\n   */\n  @Input('ngpTooltipContainer') container: HTMLElement = this.tooltipConfig.container;\n\n  /**\n   * The tooltip id.\n   */\n  protected tooltipId?: string;\n\n  ngOnInit(): void {\n    this.overlayTrigger.registerProvider({\n      provide: NgpTooltipTriggerToken,\n      useValue: this,\n    });\n  }\n\n  /**\n   * Show the tooltip.\n   */\n  @HostListener('mouseenter')\n  @HostListener('focus')\n  show(): void {\n    this.overlayTrigger.show();\n  }\n\n  /**\n   * Hide the tooltip.\n   */\n  @HostListener('mouseleave')\n  @HostListener('blur')\n  @HostListener('window:keydown.escape')\n  hide(): void {\n    this.overlayTrigger.hide();\n  }\n\n  /**\n   * Define the tooltip id.\n   * @param id The tooltip id\n   * @internal\n   */\n  setTooltipId(id: string) {\n    this.tooltipId = id;\n  }\n}\n",
            "selector": "[ngpTooltipTrigger]",
            "providers": [],
            "hostDirectives": [
                {
                    "name": "NgpOverlayTriggerDirective",
                    "inputs": [
                        "ngpOverlayTrigger: ngpTooltipTrigger",
                        "ngpOverlayDisabled: ngpTooltipDisabled",
                        "ngpOverlayPlacement: ngpTooltipPlacement",
                        "ngpOverlayOffset: ngpTooltipOffset",
                        "ngpOverlayShowDelay: ngpTooltipShowDelay",
                        "ngpOverlayHideDelay: ngpTooltipHideDelay",
                        "ngpOverlayShift: ngpTooltipShift",
                        "ngpOverlayFlip: ngpTooltipFlip",
                        "ngpOverlayContainer: ngpTooltipContainer"
                    ],
                    "outputs": []
                }
            ],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "ngpTooltipContainer",
                    "defaultValue": "this.tooltipConfig.container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2858,
                            "end": 2884,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 2859,
                                "end": 2866,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>document.body</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the container in to which the tooltip should be attached.\n",
                    "description": "<p>Define the container in to which the tooltip should be attached.</p>\n",
                    "line": 99,
                    "type": "HTMLElement",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpTooltipDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1611,
                            "end": 1629,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1612,
                                "end": 1619,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine if the trigger should be disabled.\n",
                    "description": "<p>Define if the trigger should be disabled.</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpTooltipFlip",
                    "defaultValue": "this.tooltipConfig.flip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2644,
                            "end": 2661,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 2645,
                                "end": 2652,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine whether the tooltip should flip when there is not enough space for the tooltip.\n",
                    "description": "<p>Define whether the tooltip should flip when there is not enough space for the tooltip.</p>\n",
                    "line": 92,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpTooltipHideDelay",
                    "defaultValue": "this.tooltipConfig.hideDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2398,
                            "end": 2412,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 2399,
                                "end": 2406,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the delay before the tooltip is hidden.\n",
                    "description": "<p>Define the delay before the tooltip is hidden.</p>\n",
                    "line": 85,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpTooltipOffset",
                    "defaultValue": "this.tooltipConfig.offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1992,
                            "end": 2006,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1993,
                                "end": 2000,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the offset of the tooltip relative to the trigger.\n",
                    "description": "<p>Define the offset of the tooltip relative to the trigger.</p>\n",
                    "line": 71,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "ngpTooltipPlacement",
                    "defaultValue": "this.tooltipConfig.placement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1808,
                            "end": 1829,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1809,
                                "end": 1816,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;bottom&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the placement of the tooltip relative to the trigger.\n",
                    "description": "<p>Define the placement of the tooltip relative to the trigger.</p>\n",
                    "line": 65,
                    "type": "Placement",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "ngpTooltipShowDelay",
                    "defaultValue": "this.tooltipConfig.showDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2192,
                            "end": 2206,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 2193,
                                "end": 2200,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "default"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the delay before the tooltip is displayed.\n",
                    "description": "<p>Define the delay before the tooltip is displayed.</p>\n",
                    "line": 78,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "ngpTooltipTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nDefine the tooltip to display when the trigger is activated.\n",
                    "description": "<p>Define the tooltip to display when the trigger is activated.</p>\n",
                    "line": 53,
                    "type": "TemplateRef<void>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip.\n",
                    "description": "<p>Hide the tooltip.</p>\n",
                    "line": 128
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the tooltip.\n",
                    "description": "<p>Show the tooltip.</p>\n",
                    "line": 118
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the tooltip.\n",
                    "description": "<p>Show the tooltip.</p>\n",
                    "line": 118
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip.\n",
                    "description": "<p>Hide the tooltip.</p>\n",
                    "line": 128
                },
                {
                    "name": "window:keydown.escape",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip.\n",
                    "description": "<p>Hide the tooltip.</p>\n",
                    "line": 128
                }
            ],
            "propertiesClass": [
                {
                    "name": "overlayTrigger",
                    "defaultValue": "inject(NgpOverlayTriggerDirective)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the overlay trigger directive</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nAccess the overlay trigger directive\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "tooltipConfig",
                    "defaultValue": "injectTooltipConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the global tooltip configuration</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nAccess the global tooltip configuration\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                },
                {
                    "name": "tooltipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>The tooltip id.</p>\n",
                    "line": 104,
                    "rawdescription": "\n\nThe tooltip id.\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip.\n",
                    "description": "<p>Hide the tooltip.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur'"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown.escape'"
                        }
                    ],
                    "modifierKind": [
                        167,
                        167,
                        167
                    ]
                },
                {
                    "name": "setTooltipId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the tooltip id.\n",
                    "description": "<p>Define the tooltip id.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3553,
                                "end": 3555,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3547,
                                "end": 3552,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The tooltip id</p>\n"
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the tooltip.\n",
                    "description": "<p>Show the tooltip.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus'"
                        }
                    ],
                    "modifierKind": [
                        167,
                        167
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "NgpVisuallyHiddenDirective",
            "id": "directive-NgpVisuallyHiddenDirective-fbac59e476ab8ac3d3c661e047f9cd816ff3bfe3f033f107fa36cf9a357a6de580b49c8a240fe3c7007f1afe5ba1699a2ca609d6abc077dc61208316a6231f60",
            "file": "packages/ng-primitives/visually-hidden/src/visually-hidden/visually-hidden.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, OnInit, inject } from '@angular/core';\n\n@Directive({\n  selector: '[ngpVisuallyHidden]',\n  standalone: true,\n})\nexport class NgpVisuallyHiddenDirective implements OnInit {\n  /**\n   * Access the element.\n   */\n  private readonly element = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  ngOnInit(): void {\n    // hide the element\n    Object.assign(this.element.nativeElement.style, {\n      position: 'absolute',\n      border: 0,\n      width: '1px',\n      height: '1px',\n      padding: 0,\n      margin: '-1px',\n      overflow: 'hidden',\n      clip: 'rect(0, 0, 0, 0)',\n      whiteSpace: 'nowrap',\n      wordWrap: 'normal',\n      // Avoid browsers rendering the focus ring in some cases.\n      outline: 'none',\n      // Avoid some cases where the browser will still render the native controls\n      '-webkit-appearance': 'none',\n      '-moz-appearance': 'none',\n      left: 0,\n    });\n  }\n}\n",
            "selector": "[ngpVisuallyHidden]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "defaultValue": "inject<ElementRef<HTMLElement>>(ElementRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Access the element.</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nAccess the element.\n",
                    "modifierKind": [
                        121,
                        146
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "OnInit"
            ]
        }
    ],
    "components": [],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "defaultAccordionConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NgpAccordionConfig",
                "defaultValue": "{\n  multiple: false,\n  orientation: 'vertical',\n}"
            },
            {
                "name": "defaultAvatarConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NgpAvatarConfig",
                "defaultValue": "{\n  delay: 0,\n}"
            },
            {
                "name": "defaultTabsetConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NgpTabsetConfig",
                "defaultValue": "{\n  orientation: 'horizontal',\n  activateOnFocus: true,\n  wrap: true,\n}"
            },
            {
                "name": "defaultTooltipConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NgpTooltipConfig",
                "defaultValue": "{\n  offset: 4,\n  placement: 'top',\n  showDelay: 0,\n  hideDelay: 0,\n  flip: true,\n  container: document.body,\n}"
            },
            {
                "name": "isNgPrimitives",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/src/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "true",
                "rawdescription": "This file is not used but we need some content to make the build work.",
                "description": "<p>This file is not used but we need some content to make the build work.</p>\n"
            },
            {
                "name": "NgpAccordionConfigToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpAccordionConfig>(\n  'NgpAccordionConfiguration',\n)"
            },
            {
                "name": "NgpAccordionPanelToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpAccordionPanelDirective>(\n  'NgpAccordionPanelToken',\n)"
            },
            {
                "name": "NgpAccordionToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/accordion/src/accordion/accordion.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpAccordionDirective>('NgpAccordionToken')"
            },
            {
                "name": "NgpAvatarConfigToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpAvatarConfig>('NgpAvatarConfigToken')"
            },
            {
                "name": "NgpAvatarToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/avatar/src/avatar/avatar.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpAvatarDirective>('NgpAvatarToken')"
            },
            {
                "name": "NgpOverlayArrowToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/overlay/src/overlay-arrow/overlay-arrow.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpOverlayArrowDirective>(\n  'NgpOverlayArrowToken',\n)"
            },
            {
                "name": "NgpOverlayToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/overlay/src/overlay/overlay.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpOverlayDirective>('NgpOverlayToken')"
            },
            {
                "name": "NgpOverlayTriggerToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/overlay/src/overlay-trigger/overlay-trigger.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpOverlayTriggerDirective>(\n  'NgpOverlayTriggerToken',\n)"
            },
            {
                "name": "NgpProgressToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/progress/src/progress/progress.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpProgressDirective>('NgpProgressDirective')"
            },
            {
                "name": "NgpRovingFocusGroupToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpRovingFocusGroupDirective>(\n  'NgpRovingFocusToken',\n)"
            },
            {
                "name": "NgpRovingFocusItemToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpRovingFocusItemDirective>(\n  'NgpRovingFocusItemToken',\n)"
            },
            {
                "name": "NgpSwitchToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/switch/src/switch/switch.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpSwitchDirective>('NgpSwitchToken')"
            },
            {
                "name": "NgpTabsetConfigToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpTabsetConfig>('NgpTabsetConfiguration')"
            },
            {
                "name": "NgpTabsetToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/tabs/src/tabset/tabset.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpTabsetDirective>('NgpTabsetToken')"
            },
            {
                "name": "NgpToggleGroupButtonToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/toggle-group/src/toggle-group-button/toggle-group-button.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpToggleGroupButtonDirective>(\n  'NgpToggleGroupButtonToken',\n)"
            },
            {
                "name": "NgpToggleGroupToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/toggle-group/src/toggle-group/toggle-group.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<\n  NgpToggleGroupDirective | NgpToggleGroupMultiDirective\n>('NgpToggleGroupToken')"
            },
            {
                "name": "NgpTooltipConfigToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpTooltipConfig>('NgpTooltipConfig')"
            },
            {
                "name": "NgpTooltipTriggerToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/tooltip/src/tooltip-trigger/tooltip-trigger.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NgpTooltipTriggerDirective>(\n  'NgpTooltipTriggerToken',\n)"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "A unique id for the panel.",
                "description": "<p>A unique id for the panel.</p>\n"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/tabs/src/tabset/tabset.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "Define a unique id for the tabset",
                "description": "<p>Define a unique id for the tabset</p>\n"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-primitives/tooltip/src/tooltip/tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "A unique identifier for the tooltip",
                "description": "<p>A unique identifier for the tooltip</p>\n"
            }
        ],
        "functions": [
            {
                "name": "fromResizeEvent",
                "file": "packages/ng-primitives/resize/src/utils/resize.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A simple helper function to create a resize observer as an RxJS Observable.</p>\n",
                "args": [
                    {
                        "name": "element",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<ResizeEvent>",
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "injectAccordion",
                "file": "packages/ng-primitives/accordion/src/accordion/accordion.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "NgpAccordionDirective"
            },
            {
                "name": "injectAccordionConfig",
                "file": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Inject the accordion configuration</p>\n",
                "args": [],
                "returnType": "NgpAccordionConfig",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 956,
                            "end": 963,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The global accordion configuration</p>\n"
                    }
                ]
            },
            {
                "name": "injectAccordionPanel",
                "file": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "NgpAccordionPanelDirective"
            },
            {
                "name": "injectAvatar",
                "file": "packages/ng-primitives/avatar/src/avatar/avatar.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "NgpAvatarDirective"
            },
            {
                "name": "injectAvatarConfig",
                "file": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "NgpAvatarConfig"
            },
            {
                "name": "injectOverlayTrigger",
                "file": "packages/ng-primitives/overlay/src/overlay-trigger/overlay-trigger.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Inject the overlay trigger directive</p>\n",
                "args": [],
                "returnType": "NgpOverlayTriggerDirective"
            },
            {
                "name": "injectProgress",
                "file": "packages/ng-primitives/progress/src/progress/progress.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "NgpProgressDirective"
            },
            {
                "name": "injectRovingFocusGroup",
                "file": "packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Inject the roving focus directive instance.</p>\n",
                "args": [],
                "returnType": "NgpRovingFocusGroupDirective"
            },
            {
                "name": "injectRovingFocusItem",
                "file": "packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "NgpRovingFocusItemDirective"
            },
            {
                "name": "injectSwitch",
                "file": "packages/ng-primitives/switch/src/switch/switch.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "NgpSwitchDirective"
            },
            {
                "name": "injectTabset",
                "file": "packages/ng-primitives/tabs/src/tabset/tabset.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Inject the tabset directive instance</p>\n",
                "args": [],
                "returnType": "NgpTabsetDirective"
            },
            {
                "name": "injectTabsetConfig",
                "file": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Inject the tabset configuration</p>\n",
                "args": [],
                "returnType": "NgpTabsetConfig",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 1038,
                            "end": 1045,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The global tabset configuration</p>\n"
                    }
                ]
            },
            {
                "name": "injectToggleGroup",
                "file": "packages/ng-primitives/toggle-group/src/toggle-group/toggle-group.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "NgpToggleGroupDirective | NgpToggleGroupMultiDirective"
            },
            {
                "name": "injectToggleGroupButton",
                "file": "packages/ng-primitives/toggle-group/src/toggle-group-button/toggle-group-button.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "NgpToggleGroupButtonDirective"
            },
            {
                "name": "injectTooltipConfig",
                "file": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Inject the Tooltip configuration</p>\n",
                "args": [],
                "returnType": "NgpTooltipConfig",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 1498,
                            "end": 1505,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The global Tooltip configuration</p>\n"
                    }
                ]
            },
            {
                "name": "injectTooltipTrigger",
                "file": "packages/ng-primitives/tooltip/src/tooltip-trigger/tooltip-trigger.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "NgpTooltipTriggerDirective"
            },
            {
                "name": "provideAccordionConfig",
                "file": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provide the default accordion configuration</p>\n",
                "args": [
                    {
                        "name": "config",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Provider[]",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 626,
                            "end": 632,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "config"
                        },
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 620,
                            "end": 625,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>The accordion configuration</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 665,
                            "end": 672,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The provider</p>\n"
                    }
                ]
            },
            {
                "name": "provideAvatarConfig",
                "file": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Provider[]",
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "provideTabsetConfig",
                "file": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provide the default tabset configuration</p>\n",
                "args": [
                    {
                        "name": "config",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Provider[]",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 726,
                            "end": 732,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "config"
                        },
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 720,
                            "end": 725,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>The tabset configuration</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 762,
                            "end": 769,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The provider</p>\n"
                    }
                ]
            },
            {
                "name": "provideTooltipConfig",
                "file": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provide the default Tooltip configuration</p>\n",
                "args": [
                    {
                        "name": "config",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Provider[]",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1180,
                            "end": 1186,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "config"
                        },
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1174,
                            "end": 1179,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>The Tooltip configuration</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 1217,
                            "end": 1224,
                            "flags": 8388608,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The provider</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "NgpAvatarState",
                "childs": [
                    {
                        "name": "Idle",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Loading",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Loaded",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "packages/ng-primitives/avatar/src/avatar/avatar.directive.ts"
            }
        ],
        "groupedVariables": {
            "packages/ng-primitives/accordion/src/config/accordion.config.ts": [
                {
                    "name": "defaultAccordionConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgpAccordionConfig",
                    "defaultValue": "{\n  multiple: false,\n  orientation: 'vertical',\n}"
                },
                {
                    "name": "NgpAccordionConfigToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpAccordionConfig>(\n  'NgpAccordionConfiguration',\n)"
                }
            ],
            "packages/ng-primitives/avatar/src/config/avatar.config.ts": [
                {
                    "name": "defaultAvatarConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgpAvatarConfig",
                    "defaultValue": "{\n  delay: 0,\n}"
                },
                {
                    "name": "NgpAvatarConfigToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpAvatarConfig>('NgpAvatarConfigToken')"
                }
            ],
            "packages/ng-primitives/tabs/src/config/tabset.config.ts": [
                {
                    "name": "defaultTabsetConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgpTabsetConfig",
                    "defaultValue": "{\n  orientation: 'horizontal',\n  activateOnFocus: true,\n  wrap: true,\n}"
                },
                {
                    "name": "NgpTabsetConfigToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpTabsetConfig>('NgpTabsetConfiguration')"
                }
            ],
            "packages/ng-primitives/tooltip/src/config/tooltip.config.ts": [
                {
                    "name": "defaultTooltipConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgpTooltipConfig",
                    "defaultValue": "{\n  offset: 4,\n  placement: 'top',\n  showDelay: 0,\n  hideDelay: 0,\n  flip: true,\n  container: document.body,\n}"
                },
                {
                    "name": "NgpTooltipConfigToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpTooltipConfig>('NgpTooltipConfig')"
                }
            ],
            "packages/ng-primitives/src/index.ts": [
                {
                    "name": "isNgPrimitives",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/src/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "true",
                    "rawdescription": "This file is not used but we need some content to make the build work.",
                    "description": "<p>This file is not used but we need some content to make the build work.</p>\n"
                }
            ],
            "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.token.ts": [
                {
                    "name": "NgpAccordionPanelToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpAccordionPanelDirective>(\n  'NgpAccordionPanelToken',\n)"
                }
            ],
            "packages/ng-primitives/accordion/src/accordion/accordion.token.ts": [
                {
                    "name": "NgpAccordionToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/accordion/src/accordion/accordion.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpAccordionDirective>('NgpAccordionToken')"
                }
            ],
            "packages/ng-primitives/avatar/src/avatar/avatar.token.ts": [
                {
                    "name": "NgpAvatarToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/avatar/src/avatar/avatar.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpAvatarDirective>('NgpAvatarToken')"
                }
            ],
            "packages/ng-primitives/overlay/src/overlay-arrow/overlay-arrow.token.ts": [
                {
                    "name": "NgpOverlayArrowToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/overlay/src/overlay-arrow/overlay-arrow.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpOverlayArrowDirective>(\n  'NgpOverlayArrowToken',\n)"
                }
            ],
            "packages/ng-primitives/overlay/src/overlay/overlay.token.ts": [
                {
                    "name": "NgpOverlayToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/overlay/src/overlay/overlay.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpOverlayDirective>('NgpOverlayToken')"
                }
            ],
            "packages/ng-primitives/overlay/src/overlay-trigger/overlay-trigger.token.ts": [
                {
                    "name": "NgpOverlayTriggerToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/overlay/src/overlay-trigger/overlay-trigger.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpOverlayTriggerDirective>(\n  'NgpOverlayTriggerToken',\n)"
                }
            ],
            "packages/ng-primitives/progress/src/progress/progress.token.ts": [
                {
                    "name": "NgpProgressToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/progress/src/progress/progress.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpProgressDirective>('NgpProgressDirective')"
                }
            ],
            "packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.token.ts": [
                {
                    "name": "NgpRovingFocusGroupToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpRovingFocusGroupDirective>(\n  'NgpRovingFocusToken',\n)"
                }
            ],
            "packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.token.ts": [
                {
                    "name": "NgpRovingFocusItemToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpRovingFocusItemDirective>(\n  'NgpRovingFocusItemToken',\n)"
                }
            ],
            "packages/ng-primitives/switch/src/switch/switch.token.ts": [
                {
                    "name": "NgpSwitchToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/switch/src/switch/switch.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpSwitchDirective>('NgpSwitchToken')"
                }
            ],
            "packages/ng-primitives/tabs/src/tabset/tabset.token.ts": [
                {
                    "name": "NgpTabsetToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/tabs/src/tabset/tabset.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpTabsetDirective>('NgpTabsetToken')"
                }
            ],
            "packages/ng-primitives/toggle-group/src/toggle-group-button/toggle-group-button.token.ts": [
                {
                    "name": "NgpToggleGroupButtonToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/toggle-group/src/toggle-group-button/toggle-group-button.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpToggleGroupButtonDirective>(\n  'NgpToggleGroupButtonToken',\n)"
                }
            ],
            "packages/ng-primitives/toggle-group/src/toggle-group/toggle-group.token.ts": [
                {
                    "name": "NgpToggleGroupToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/toggle-group/src/toggle-group/toggle-group.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<\n  NgpToggleGroupDirective | NgpToggleGroupMultiDirective\n>('NgpToggleGroupToken')"
                }
            ],
            "packages/ng-primitives/tooltip/src/tooltip-trigger/tooltip-trigger.token.ts": [
                {
                    "name": "NgpTooltipTriggerToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/tooltip/src/tooltip-trigger/tooltip-trigger.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NgpTooltipTriggerDirective>(\n  'NgpTooltipTriggerToken',\n)"
                }
            ],
            "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.directive.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "A unique id for the panel.",
                    "description": "<p>A unique id for the panel.</p>\n"
                }
            ],
            "packages/ng-primitives/tabs/src/tabset/tabset.directive.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/tabs/src/tabset/tabset.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "Define a unique id for the tabset",
                    "description": "<p>Define a unique id for the tabset</p>\n"
                }
            ],
            "packages/ng-primitives/tooltip/src/tooltip/tooltip.directive.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-primitives/tooltip/src/tooltip/tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "A unique identifier for the tooltip",
                    "description": "<p>A unique identifier for the tooltip</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "packages/ng-primitives/resize/src/utils/resize.ts": [
                {
                    "name": "fromResizeEvent",
                    "file": "packages/ng-primitives/resize/src/utils/resize.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A simple helper function to create a resize observer as an RxJS Observable.</p>\n",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<ResizeEvent>",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "packages/ng-primitives/accordion/src/accordion/accordion.token.ts": [
                {
                    "name": "injectAccordion",
                    "file": "packages/ng-primitives/accordion/src/accordion/accordion.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "NgpAccordionDirective"
                }
            ],
            "packages/ng-primitives/accordion/src/config/accordion.config.ts": [
                {
                    "name": "injectAccordionConfig",
                    "file": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Inject the accordion configuration</p>\n",
                    "args": [],
                    "returnType": "NgpAccordionConfig",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 956,
                                "end": 963,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The global accordion configuration</p>\n"
                        }
                    ]
                },
                {
                    "name": "provideAccordionConfig",
                    "file": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provide the default accordion configuration</p>\n",
                    "args": [
                        {
                            "name": "config",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Provider[]",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 626,
                                "end": 632,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 620,
                                "end": 625,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The accordion configuration</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 665,
                                "end": 672,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The provider</p>\n"
                        }
                    ]
                }
            ],
            "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.token.ts": [
                {
                    "name": "injectAccordionPanel",
                    "file": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "NgpAccordionPanelDirective"
                }
            ],
            "packages/ng-primitives/avatar/src/avatar/avatar.token.ts": [
                {
                    "name": "injectAvatar",
                    "file": "packages/ng-primitives/avatar/src/avatar/avatar.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "NgpAvatarDirective"
                }
            ],
            "packages/ng-primitives/avatar/src/config/avatar.config.ts": [
                {
                    "name": "injectAvatarConfig",
                    "file": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "NgpAvatarConfig"
                },
                {
                    "name": "provideAvatarConfig",
                    "file": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "config",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Provider[]",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "packages/ng-primitives/overlay/src/overlay-trigger/overlay-trigger.token.ts": [
                {
                    "name": "injectOverlayTrigger",
                    "file": "packages/ng-primitives/overlay/src/overlay-trigger/overlay-trigger.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Inject the overlay trigger directive</p>\n",
                    "args": [],
                    "returnType": "NgpOverlayTriggerDirective"
                }
            ],
            "packages/ng-primitives/progress/src/progress/progress.token.ts": [
                {
                    "name": "injectProgress",
                    "file": "packages/ng-primitives/progress/src/progress/progress.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "NgpProgressDirective"
                }
            ],
            "packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.token.ts": [
                {
                    "name": "injectRovingFocusGroup",
                    "file": "packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Inject the roving focus directive instance.</p>\n",
                    "args": [],
                    "returnType": "NgpRovingFocusGroupDirective"
                }
            ],
            "packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.token.ts": [
                {
                    "name": "injectRovingFocusItem",
                    "file": "packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "NgpRovingFocusItemDirective"
                }
            ],
            "packages/ng-primitives/switch/src/switch/switch.token.ts": [
                {
                    "name": "injectSwitch",
                    "file": "packages/ng-primitives/switch/src/switch/switch.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "NgpSwitchDirective"
                }
            ],
            "packages/ng-primitives/tabs/src/tabset/tabset.token.ts": [
                {
                    "name": "injectTabset",
                    "file": "packages/ng-primitives/tabs/src/tabset/tabset.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Inject the tabset directive instance</p>\n",
                    "args": [],
                    "returnType": "NgpTabsetDirective"
                }
            ],
            "packages/ng-primitives/tabs/src/config/tabset.config.ts": [
                {
                    "name": "injectTabsetConfig",
                    "file": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Inject the tabset configuration</p>\n",
                    "args": [],
                    "returnType": "NgpTabsetConfig",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1038,
                                "end": 1045,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The global tabset configuration</p>\n"
                        }
                    ]
                },
                {
                    "name": "provideTabsetConfig",
                    "file": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provide the default tabset configuration</p>\n",
                    "args": [
                        {
                            "name": "config",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Provider[]",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 726,
                                "end": 732,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 720,
                                "end": 725,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The tabset configuration</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 762,
                                "end": 769,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The provider</p>\n"
                        }
                    ]
                }
            ],
            "packages/ng-primitives/toggle-group/src/toggle-group/toggle-group.token.ts": [
                {
                    "name": "injectToggleGroup",
                    "file": "packages/ng-primitives/toggle-group/src/toggle-group/toggle-group.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "NgpToggleGroupDirective | NgpToggleGroupMultiDirective"
                }
            ],
            "packages/ng-primitives/toggle-group/src/toggle-group-button/toggle-group-button.token.ts": [
                {
                    "name": "injectToggleGroupButton",
                    "file": "packages/ng-primitives/toggle-group/src/toggle-group-button/toggle-group-button.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "NgpToggleGroupButtonDirective"
                }
            ],
            "packages/ng-primitives/tooltip/src/config/tooltip.config.ts": [
                {
                    "name": "injectTooltipConfig",
                    "file": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Inject the Tooltip configuration</p>\n",
                    "args": [],
                    "returnType": "NgpTooltipConfig",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1498,
                                "end": 1505,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The global Tooltip configuration</p>\n"
                        }
                    ]
                },
                {
                    "name": "provideTooltipConfig",
                    "file": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provide the default Tooltip configuration</p>\n",
                    "args": [
                        {
                            "name": "config",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Provider[]",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1180,
                                "end": 1186,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "config"
                            },
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1174,
                                "end": 1179,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The Tooltip configuration</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1217,
                                "end": 1224,
                                "flags": 8388608,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The provider</p>\n"
                        }
                    ]
                }
            ],
            "packages/ng-primitives/tooltip/src/tooltip-trigger/tooltip-trigger.token.ts": [
                {
                    "name": "injectTooltipTrigger",
                    "file": "packages/ng-primitives/tooltip/src/tooltip-trigger/tooltip-trigger.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "NgpTooltipTriggerDirective"
                }
            ]
        },
        "groupedEnumerations": {
            "packages/ng-primitives/avatar/src/avatar/avatar.directive.ts": [
                {
                    "name": "NgpAvatarState",
                    "childs": [
                        {
                            "name": "Idle",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Loading",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Loaded",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "packages/ng-primitives/avatar/src/avatar/avatar.directive.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 47,
        "status": "medium",
        "files": [
            {
                "filePath": "packages/ng-primitives/accordion/src/accordion-content/accordion-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpAccordionContentDirective",
                "coveragePercent": 90,
                "coverageCount": "10/11",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/accordion-header/accordion-header.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpAccordionHeaderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpAccordionPanelDirective",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueId",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectAccordionPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/accordion-panel/accordion-panel.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpAccordionPanelToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/accordion-trigger/accordion-trigger.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpAccordionTriggerDirective",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/accordion/accordion.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpAccordionDirective",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/accordion/accordion.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectAccordion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/accordion/accordion.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpAccordionToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/common/accordion-state.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpAccordionStateDirective",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgpAccordionConfig",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectAccordionConfig",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "provideAccordionConfig",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultAccordionConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/accordion/src/config/accordion.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpAccordionConfigToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/avatar/src/avatar-fallback/avatar-fallback.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpAvatarFallbackDirective",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/avatar/src/avatar-image/avatar-image.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpAvatarImageDirective",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "packages/ng-primitives/avatar/src/avatar/avatar.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpAvatarDirective",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "packages/ng-primitives/avatar/src/avatar/avatar.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectAvatar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/avatar/src/avatar/avatar.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpAvatarToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgpAvatarConfig",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectAvatarConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "provideAvatarConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultAvatarConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/avatar/src/config/avatar.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpAvatarConfigToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/overlay/src/overlay-arrow/overlay-arrow.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpOverlayArrowDirective",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "packages/ng-primitives/overlay/src/overlay-arrow/overlay-arrow.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpOverlayArrowToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/overlay/src/overlay-trigger/overlay-trigger.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpOverlayTriggerDirective",
                "coveragePercent": 96,
                "coverageCount": "31/32",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/overlay/src/overlay-trigger/overlay-trigger.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectOverlayTrigger",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/overlay/src/overlay-trigger/overlay-trigger.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpOverlayTriggerToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/overlay/src/overlay/overlay.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpOverlayDirective",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "packages/ng-primitives/overlay/src/overlay/overlay.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpOverlayToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/progress/src/progress-indicator/progress-indicator.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpProgressIndicatorDirective",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "packages/ng-primitives/progress/src/progress/progress.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpProgressDirective",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "packages/ng-primitives/progress/src/progress/progress.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectProgress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/progress/src/progress/progress.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpProgressToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/resize/src/resize/resize.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpResizeDirective",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/resize/src/utils/resize.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResizeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/resize/src/utils/resize.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "fromResizeEvent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpRovingFocusGroupDirective",
                "coveragePercent": 90,
                "coverageCount": "10/11",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectRovingFocusGroup",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpRovingFocusGroupToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpRovingFocusItemDirective",
                "coveragePercent": 90,
                "coverageCount": "10/11",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectRovingFocusItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpRovingFocusItemToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/separator/src/separator/separator.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpSeparatorDirective",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "packages/ng-primitives/src/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNgPrimitives",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/switch/src/switch-thumb/switch-thumb.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpSwitchThumbDirective",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "packages/ng-primitives/switch/src/switch/switch.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpSwitchDirective",
                "coveragePercent": 93,
                "coverageCount": "15/16",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/switch/src/switch/switch.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectSwitch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/switch/src/switch/switch.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpSwitchToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgpTabsetConfig",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectTabsetConfig",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "provideTabsetConfig",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTabsetConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/config/tabset.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpTabsetConfigToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/tab-button/tab-button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpTabButtonDirective",
                "coveragePercent": 90,
                "coverageCount": "9/10",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/tab-list/tab-list.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpTabListDirective",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/tab-panel/tab-panel.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpTabPanelDirective",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/tabset/tabset.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpTabsetDirective",
                "coveragePercent": 88,
                "coverageCount": "8/9",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/tabset/tabset.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueId",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/tabset/tabset.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectTabset",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tabs/src/tabset/tabset.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpTabsetToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/toggle-group/src/toggle-group-button/toggle-group-button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpToggleGroupButtonDirective",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/toggle-group/src/toggle-group-button/toggle-group-button.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectToggleGroupButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/toggle-group/src/toggle-group-button/toggle-group-button.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpToggleGroupButtonToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/toggle-group/src/toggle-group-multi/toggle-group-multi.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpToggleGroupMultiDirective",
                "coveragePercent": 93,
                "coverageCount": "15/16",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/toggle-group/src/toggle-group/toggle-group.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpToggleGroupDirective",
                "coveragePercent": 93,
                "coverageCount": "15/16",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/toggle-group/src/toggle-group/toggle-group.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectToggleGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/toggle-group/src/toggle-group/toggle-group.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpToggleGroupToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/toggle/src/toggle/toggle.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpToggleDirective",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgpTooltipConfig",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectTooltipConfig",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "provideTooltipConfig",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTooltipConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/config/tooltip.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpTooltipConfigToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/tooltip-arrow/tooltip-arrow.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpTooltipArrowDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/tooltip-trigger/tooltip-trigger.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpTooltipTriggerDirective",
                "coveragePercent": 95,
                "coverageCount": "19/20",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/tooltip-trigger/tooltip-trigger.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "injectTooltipTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/tooltip-trigger/tooltip-trigger.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NgpTooltipTriggerToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpTooltipDirective",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "packages/ng-primitives/tooltip/src/tooltip/tooltip.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueId",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng-primitives/visually-hidden/src/visually-hidden/visually-hidden.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgpVisuallyHiddenDirective",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            }
        ]
    }
}